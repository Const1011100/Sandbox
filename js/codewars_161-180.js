//*-Task №161 Training JS #4: Basic data types--Array (8kyu)
/*
У javascript масив є одним із основних типів даних. Щоб визначити порожній масив, ви можете
використати var arr=new Array() або var arr=[]

Масив має атрибут: length, якщо існує масив з іменем arr, використовуючи arr.length, щоб дізнатися,
скільки елементів міститься в масиві.

Кожен елемент у масиві має індекс, використовуйте arr[index], щоб отримати значення елемента.
індекс завжди починається з 0, тому перший елемент масиву arr[0], останній елемент масиву arr[arr.length-1].

Якщо ми хочемо додати нові елементи до масиву, ви можете використовувати метод масиву: push().
Він може додати елемент у кінець масиву. Натомість, якщо ми хочемо видалити останній елемент масиву,
ви можете використати метод array: pop(). наприклад:

var arr=[1,2,3]; //визначити масив arr містить елементи 1 2 3
arr.push(4); //додати елемент 4 до обр
console.log(arr) //[1,2,3,4]
arr.pop(); //видалити останній елемент з обр
console.log(arr) //[1,2,3]
завдання
Я написав п'ять функцій. Кожна функція отримує параметр arr, який є масивом. Завершіть функції за
допомогою arr всередині тіл функцій.

     1. getLength(arr) має повертати довжину arr
     2. getFirst(arr) має повернути перший елемент arr
     3. getLast(arr) має повернути останній елемент arr
     4. pushElement(arr) має надсилати елемент до arr, а потім повертати arr
     5. popElement(arr) має витягти елемент з arr, а потім повернути arr
Коли ви закінчите роботу, натисніть «Запустити тести», щоб перевірити, чи ваш код працює належним чином.
Наприкінці натисніть «Надіслати», щоб надіслати свій код для проходження цієї ката.
*/
// Мій варіант
function getLength(arr) {
    //return length of arr
    return arr.length;
}
function getFirst(arr) {
    //return the first element of arr
    return arr[0];
}
function getLast(arr) {
    //return the last element of arr
    return arr[arr.length - 1]
}
function pushElement(arr) {
    var el = 1;
    arr.push(el);
    //push el to arr

    return arr
}
function popElement(arr) {
    //pop an element from arr
    arr.pop();
    return arr;
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №162 Welcome to the City (8kyu)
/*
Створіть метод, який приймає як вхідні дані ім’я, місто та штат, щоб вітати людину.
Зауважте, що ім’я буде масивом, що складається з одного чи кількох значень, які слід об’єднати з
одним пробілом між кожним, а довжина масиву імен у тестових випадках буде різною.

приклад:
['Джон', 'Сміт'], 'Фенікс', 'Арізона'
Цей приклад поверне рядок Hello, John Smith! Ласкаво просимо до Фенікса, штат Арізона!
*/

// Мій варіант
function sayHello(name, city, state) {
    return `Hello, ${name.join(' ')}! Welcome to ${city}, ${state}!`;
}

// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №163 Grasshopper - Function syntax debugging (8kyu)
/*
Grasshopper – налагодження синтаксису функції
Студент працював над функцією та зробив деякі синтаксичні помилки під час кодування.
Допоможіть їм знайти свої помилки та виправити їх.
*/

// Мій варіант
function main(verb, noun) {
    return verb + noun;
}

// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №164 Simple Fun #1: Seats in Theater (8kyu)
/*
Ваш друг порадив вам подивитися нову виставу в найпопулярнішому театрі міста. Він розбирається в
мистецтві і зазвичай його поради хороші, але не цього разу: вистава вийшла страшенно нудною.
Це так погано, що ви хочете вислизнути, що досить просто, тим більше, що вихід розташований прямо за
вашим рядом ліворуч. Усе, що вам потрібно зробити, це перелізти через сидіння та пробратися до виходу.

Основна проблема полягає у вашій сором’язливості: ви боїтеся, що в кінцевому підсумку закриєте огляд
(навіть на пару секунд) усім людям, які сидять позаду вас і у вашій колоні чи колонах ліворуч від вас.
Щоб набратися сміливості, ви вирішуєте підрахувати кількість таких людей і перевірити, чи зможете ви
пройти до виходу, не заважаючи багатьом людям.

Враховуючи загальну кількість рядків і стовпців у кінотеатрі (nRows і nCols відповідно), а також рядок
і стовпець, у яких ви сидите, поверніть кількість людей, які сидять прямо позаду вас і у вашій колоні
або ліворуч, припускаючи, що всі місця зайняті.

приклад
Для nCols = 16, nRows = 11, col = 5 і row = 3 результат має бути 96.

Ось як виглядає театр:
*/

// Мій варіант
function seatsInTheater(nCols, nRows, col, row) {
    return (nCols - (col - 1)) * (nRows - row);
}

// Цікаві варіанти з Codewars
function seatsInTheater_(nCols, nRows, col, row) {
    return (nCols - col + 1) * (nRows - row);
}
// ================================================================================================
// ================================================================================================
//*-Task №165 Fix your code before the garden dies! (8kyu)
/*
У вас сад, відзначений нагородами, і щодня рослинам потрібно рівно 40 мм води. Ви створили чудовий
фрагмент JavaScript для розрахунку кількості води, яка знадобиться вашим рослинам, враховуючи
кількість дощової води, яка прогнозується на день. Ваш заздрісний сусід зламав ваш комп’ютер і
наповнив ваш код помилками.

Ваше завдання — налагодити код до того, як ваші рослини загинуть!
*/

// Мій варіант
function rainAmount(mm) {
    if (mm < 40) {
        return `You need to give your plant ${40 - mm}mm of water`;
    } else {
        return "Your plant has had more than enough water for today!";
    }
}

// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №166 Holiday VIII - Duty Free (8kyu)
/*
Мета цієї ката полягає в тому, щоб визначити, скільки пляшок віскі в безмитній торгівлі вам
доведеться купити, щоб заощадження порівняно зі звичайною ціною на вулиці ефективно покрили вартість
вашої відпустки.

Вам буде надано основну ціну (normPrice, у £ (фунтах)), безмитну знижку (знижка, у відсотках) і
вартість свята (у £).

Наприклад, якщо пляшка зазвичай коштує 10 фунтів стерлінгів, а знижка безмитної торгівлі становить 10%,
ви заощадите 1 фунт стерлінгів за пляшку. Якщо ваша відпустка коштуватиме 500 фунтів стерлінгів, вам
доведеться купити 500 пляшок, щоб заощадити 500 фунтів стерлінгів, тому відповідь, яку ви повертаєте,
має бути 500.

Інший приклад: якщо зазвичай пляшка коштує 12 фунтів стерлінгів, а знижка безмитної торгівлі становить
50%, ви заощадите 6 фунтів стерлінгів за пляшку. Якщо ваша відпустка коштуватиме 1000 фунтів стерлінгів,
вам доведеться купити 166,66 пляшок, щоб заощадити 1000 фунтів стерлінгів, тож вашою відповіддю має
бути 166 пляшок.

Усі вхідні дані будуть цілими числами. Будь ласка, поверніть ціле число. Округлити в меншу сторону.
*/

// Мій варіант
function dutyFree(normPrice, discount, hol) {
    return Math.floor(hol / (normPrice * discount / 100))
}

// Цікаві варіанти з Codewars
function dutyFree_(normPrice, discount, hol) {
    return (Math.floor(hol / normPrice / discount * 100))
}
// ================================================================================================
// ================================================================================================
//*-залишилось 217шт