//*-Task №761 Least Larger (7kyu)
/*
Завдання
Дано масив чисел та індекс. Поверніть або індекс найменшого числа, яке більше за елемент із
заданим індексом, або -1, якщо такого індексу немає (або, де це можливо, Нічого чи аналогічне
порожнє значення).

Примітки
Можливо кілька правильних відповідей. У цьому випадку поверніть будь-яку з них.
Заданий індекс буде всередині заданого масиву.
Тому заданий масив ніколи не буде порожнім.

Приклад
leastLarger( [4, 1, 3, 5, 6], 0 )  =>  3
leastLarger( [4, 1, 3, 5, 6], 4 )  => -1
 */

// Мій варіант
function leastLarger(a, i) {
  const targetValue = a[i];

  return a.reduce((result, current, index) => {
    if (current > targetValue && (result === -1 || current < a[result])) {
      return index;
    }
    return result;
  }, -1);
}
// Цікаві варіанти з Codewars
const leastLarger_ = (a, i) =>
  a.indexOf(Math.min(...a.filter((n) => n > a[i])));
// ================================================================================================
// ================================================================================================
//*-Task №762 Filter Coffee (7kyu)
/*
Ви любите каву та хочете знати, які зерна ви можете собі дозволити купити.
Першим аргументом вашої функції пошуку буде число, яке представляє ваш бюджет.
Другим аргументом буде масив цін на кавові зерна.
Ваша функція «пошуку» повинна повернути магазини, які продають каву в межах вашого бюджету.
Функція пошуку повинна повернути рядок цін на кавові зерна, які ви можете собі дозволити.
Ціни в цьому рядку слід відсортувати у порядку зростання.
 */

// Мій варіант
function search(budget, prices) {
  return prices
    .filter((n) => n <= budget)
    .sort((a, b) => a - b)
    .join(',');
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №763 The Office III - Broken Photocopier (7kyu)
/*
Клятий ксерокс зламався... Якраз коли ти нишпорив по офісу, щоб роздрукувати свій улюблений двійковий код!
Замість копіювання оригіналу, він перетворює його на зворотний: '1' стає '0' і навпаки.
Якщо вказано рядок двійкового коду, поверніть версію, яку видає ксерокс, у вигляді рядка.
 */

// Мій варіант
function broken(x) {
  return x
    .split('')
    .map((bit) => (bit === '1' ? '0' : '1'))
    .join('');
}
// Цікаві варіанти з Codewars
function broken_(x) {
  return x.replace(/[10]/gi, (match) => (match === '0' ? '1' : '0'));
}
// ================================================================================================
// ================================================================================================
//*-Task №764 Covfefe (7kyu)
/*
Covfefe
Вам задано рядок. Ви повинні замінити будь-яке входження слова coverage послідовності на covfefe.
Однак, якщо ви не знайдете слова coverage у рядку, ви повинні додати covfefe в кінці рядка з пробілом.

Для мов, де рядок змінний (наприклад, ruby), не змінюйте заданий рядок, інакше це призведе до
порушення роботи тестових випадків.
 */

// Мій варіант
function covfefe(str) {
  return str.includes('coverage')
    ? str.replace(/coverage/g, 'covfefe')
    : str + ' covfefe';
}

// Цікаві варіанти з Codewars
function covfefe_(str) {
  const res = str.replace(/coverage/g, 'covfefe');
  return res === str ? str + ' covfefe' : res;
}
// ================================================================================================
// ================================================================================================
//*-Task №765 (7kyu)
/*
Позичальники – це крихітні вигадані люди. Як крихітні люди, вони повинні бути впевнені, що їх не
помітять, або, що ще важливіше, не розтопчуть.

В результаті позичальники розмовляють дуже-дуже тихо. Вони виявляють, що великі літери та будь-який
вид пунктуації призводять до підвищення голосу та наражають їх на небезпеку.

Юні позичальники благають батьків припинити використовувати великі літери та розділові знаки.

Змініть введений текст на нову мову позичальника. Допоможіть врятувати наступне покоління!
 */

// Мій варіант
function borrow(s) {
  return s.replace(/[^a-zA-Z]/g, '').toLowerCase();
}

// Цікаві варіанти з Codewars
const borrow_ = (s) => s.toLowerCase().replace(/\W/g, '');
// ================================================================================================
// ================================================================================================
// console.time('timer_1');
// console.timeEnd('timer_1');
