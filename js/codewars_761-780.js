//*-Task №761 Least Larger (7kyu)
/*
Завдання
Дано масив чисел та індекс. Поверніть або індекс найменшого числа, яке більше за елемент із
заданим індексом, або -1, якщо такого індексу немає (або, де це можливо, Нічого чи аналогічне
порожнє значення).

Примітки
Можливо кілька правильних відповідей. У цьому випадку поверніть будь-яку з них.
Заданий індекс буде всередині заданого масиву.
Тому заданий масив ніколи не буде порожнім.

Приклад
leastLarger( [4, 1, 3, 5, 6], 0 )  =>  3
leastLarger( [4, 1, 3, 5, 6], 4 )  => -1
 */

// Мій варіант
function leastLarger(a, i) {
  const targetValue = a[i];

  return a.reduce((result, current, index) => {
    if (current > targetValue && (result === -1 || current < a[result])) {
      return index;
    }
    return result;
  }, -1);
}
// Цікаві варіанти з Codewars
const leastLarger_ = (a, i) =>
  a.indexOf(Math.min(...a.filter((n) => n > a[i])));
// ================================================================================================
// ================================================================================================
//*-Task №762 Filter Coffee (7kyu)
/*
Ви любите каву та хочете знати, які зерна ви можете собі дозволити купити.
Першим аргументом вашої функції пошуку буде число, яке представляє ваш бюджет.
Другим аргументом буде масив цін на кавові зерна.
Ваша функція «пошуку» повинна повернути магазини, які продають каву в межах вашого бюджету.
Функція пошуку повинна повернути рядок цін на кавові зерна, які ви можете собі дозволити.
Ціни в цьому рядку слід відсортувати у порядку зростання.
 */

// Мій варіант
function search(budget, prices) {
  return prices
    .filter((n) => n <= budget)
    .sort((a, b) => a - b)
    .join(',');
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №763 The Office III - Broken Photocopier (7kyu)
/*
Клятий ксерокс зламався... Якраз коли ти нишпорив по офісу, щоб роздрукувати свій улюблений двійковий код!
Замість копіювання оригіналу, він перетворює його на зворотний: '1' стає '0' і навпаки.
Якщо вказано рядок двійкового коду, поверніть версію, яку видає ксерокс, у вигляді рядка.
 */

// Мій варіант
function broken(x) {
  return x
    .split('')
    .map((bit) => (bit === '1' ? '0' : '1'))
    .join('');
}
// Цікаві варіанти з Codewars
function broken_(x) {
  return x.replace(/[10]/gi, (match) => (match === '0' ? '1' : '0'));
}
// ================================================================================================
// ================================================================================================
//*-Task №764 Covfefe (7kyu)
/*
Covfefe
Вам задано рядок. Ви повинні замінити будь-яке входження слова coverage послідовності на covfefe.
Однак, якщо ви не знайдете слова coverage у рядку, ви повинні додати covfefe в кінці рядка з пробілом.

Для мов, де рядок змінний (наприклад, ruby), не змінюйте заданий рядок, інакше це призведе до
порушення роботи тестових випадків.
 */

// Мій варіант
function covfefe(str) {
  return str.includes('coverage')
    ? str.replace(/coverage/g, 'covfefe')
    : str + ' covfefe';
}

// Цікаві варіанти з Codewars
function covfefe_(str) {
  const res = str.replace(/coverage/g, 'covfefe');
  return res === str ? str + ' covfefe' : res;
}
// ================================================================================================
// ================================================================================================
//*-Task №765 (7kyu)
/*
Позичальники – це крихітні вигадані люди. Як крихітні люди, вони повинні бути впевнені, що їх не
помітять, або, що ще важливіше, не розтопчуть.

В результаті позичальники розмовляють дуже-дуже тихо. Вони виявляють, що великі літери та будь-який
вид пунктуації призводять до підвищення голосу та наражають їх на небезпеку.

Юні позичальники благають батьків припинити використовувати великі літери та розділові знаки.

Змініть введений текст на нову мову позичальника. Допоможіть врятувати наступне покоління!
 */

// Мій варіант
function borrow(s) {
  return s.replace(/[^a-zA-Z]/g, '').toLowerCase();
}

// Цікаві варіанти з Codewars
const borrow_ = (s) => s.toLowerCase().replace(/\W/g, '');
// ================================================================================================
// ================================================================================================
//*-Task №766 esrever esreveR! (7kyu)
/*
У цьому ката ви повинні взяти вхідний рядок, змінити порядок слів у зворотному порядку та порядок
літер у словах у зворотному порядку.

Але, як бонус, кожен тестовий вхід закінчуватиметься знаком пунктуації (! ? .), а вихід має бути
повернутий з цим знаком у кінці.

Кілька прикладів мають допомогти уточнити:
esrever("hello world.") == "dlrow olleh."
esrever("Much l33t?") == "t33l hcuM?"
esrever("tacocat!") == "tacocat!"
Примітка: Рядок завжди буде передаватися (хоча він може бути порожнім), тому немає потреби в
перевірці інших типів на помилки.
 */

// Мій варіант
function esrever(str) {
  const punctuation = str.slice(-1);
  return (
    str
      .slice(0, -1)
      .split(' ')
      .reverse()
      .map((word) => word.split('').reverse().join(''))
      .join(' ') + punctuation
  );
}
// Цікаві варіанти з Codewars
function esrever_(s) {
  return s.slice(0, -1).split('').reverse().join('') + s.slice(-1);
}
// ================================================================================================
// ================================================================================================
//*-Task №767 Multiply Word in String (7kyu)
/*
Вам потрібно написати функцію, яка приймає рядок як перший параметр. Цей рядок буде рядком слів.

Потім ви повинні використати другий параметр, який буде цілим числом, щоб знайти відповідне слово
у заданому рядку. Перше слово буде представлено 0.

Після того, як ви знайдете рядок, ви, нарешті, помножите його на третій наданий параметр, який
також буде цілим числом. Вам також потрібно додати дефіс між кожним словом.

Приклад
modifyMultiply ("This is a string", 3, 5) 
 */

// Мій варіант
function modifyMultiply(str, loc, num) {
  const arrWords = str.split(' ');
  return new Array(num).fill(arrWords[loc]).join('-');
}
// Цікаві варіанти з Codewars
function modifyMultiply_(str, i, n) {
  return Array(n).fill(str.split(' ')[i]).join('-');
}
// ================================================================================================
// ================================================================================================
//*-Task №768 Return substring instance count (7kyu)
/*
Напишіть функцію, яка приймає два рядкові параметри search_text та full_text і повертає кількість
разів, коли search_text знайдено в full_text.

Перекриття не допускається: "aaa" містить 1 екземпляр "aa", а не 2.
search_text ніколи не буде порожнім.
Приклади:
full_text = "aa_bb_cc_dd_bb_e", search_text = "bb"
--> should return 2 since "bb" shows up twice

full_text = "aaabbbcccc", search_text = "bbb"
--> should return 1
 */

// Мій варіант
function solution(fullText, search) {
  const regExp = new RegExp(`${search}`, 'g');
  const result = fullText.match(regExp);
  return result !== null ? result.length : 0;
}
// Цікаві варіанти з Codewars
function solution_(fullText, searchText) {
  return fullText.split(searchText).length - 1;
}
//
function solution__(fullText, searchText) {
  return (fullText.match(new RegExp(searchText, 'g')) || []).length;
}
// ================================================================================================
// ================================================================================================
//*-Task №769 Previous multiple of three (7kyu)
/*
Дано додатне ціле число n: 0 < n < 1e6. Видаліть останню цифру, доки не залишиться число, кратне трьом.

Поверніть n, якщо вхідне значення вже кратне трьом, а якщо такого числа не існує, поверніть null, подібне пусте значення або -1.

Приклади
1 => null
25 => null
36 => 36
1244 => 12
952406 => 9
 */

// Мій варіант
function prevMultOfThree(n) {
  while (n > 0) {
    if (n % 3 === 0) return n;
    n = Math.floor(n / 10);
  }
  return null;
}
// Цікаві варіанти з Codewars
const prevMultOfThree_ = (n) => {
  if (n === 0) return null;
  if (n % 3 === 0) return n;
  return prevMultOfThree(+n.toString().slice(0, -1));
};
// ================================================================================================
// ================================================================================================
//*-Task №770 C.Wars (7kyu)
/*
Повне ім'я людини зазвичай складається з імені, по батькові та прізвища; проте в деяких культурах
(наприклад, у Південній Індії) може бути більше одного по батькові.

Напишіть функцію, яка приймає повне ім'я особи та повертає ініціали, розділені крапками ('.').
Ініціали мають бути великими літерами. Прізвище особи має бути повністю, а його перша літера також у великому регістрі.

Дивіться шаблон нижче:
"code wars"            ---> "C.Wars"
"Barack hussein obama" ---> "B.H.Obama"

Імена в повному імені розділяються рівно одним пробілом (' ' ); без початкових або кінцевих пробілів.
Імена завжди будуть написані малими літерами, за винятком, за бажанням, першої літери.
 */

// Мій варіант
function initials(n) {
  const names = n.split(' ');
  const lastName = names[names.length - 1];

  const initialsArray = names
    .slice(0, -1)
    .map((name) => name.charAt(0).toUpperCase() + '.');

  const formattedLastName =
    lastName.charAt(0).toUpperCase() + lastName.slice(1);

  return initialsArray.join('') + formattedLastName;
}
// Цікаві варіанти з Codewars
function initials_(n) {
  return n
    .split(' ')
    .map(
      (v, i, a) =>
        v.charAt(0).toUpperCase() + (i == a.length - 1 ? v.slice(1) : '.')
    )
    .join('');
}
// ================================================================================================
// ================================================================================================
// console.time('timer_1');
// console.timeEnd('timer_1');
