"use strict"
// ================================================================================================
//*-Task №21 Is n divisible by x and y? (8kyu)
/*
Створіть функцію, яка перевіряє, чи ділиться число n на два числа x та y. Усі вхідні дані є додатніми, відмінними від нуля числами.
Приклади:
1) n = 3, x = 1, y = 3 => true, оскільки 3 ділиться на 1 і 3
2) n = 12, x = 2, y = 6 => true, оскільки 12 ділиться на 2 і 6
3) n = 100, x = 5, y = 3 => false, оскільки 100 не ділиться на 3
4) n = 12, x = 7, y = 5 => false, оскільки 12 не ділиться ні на 7, ні на 5
*/

// Мій варіант
function isDivisible(n, x, y) {
    return n % x === 0 && n % y === 0 ? true : false;
}

// Цікаві варіанти з Codewars
function isDivisible_(n, x, y) {
    return n % x === 0 && n % y === 0;
}
// ================================================================================================
// ================================================================================================
//*-Task №22 Returning Strings (8kyu)
/*
Створіть функцію, яка повертатиме привітання, яке використовує вхід; ваша програма має повернути
'Hello, <name> how are you doing today?'.
[Переконайтеся, що ви вводите саме те, що я написав, інакше програма може не працювати належним чином]
*/

// Мій варіант
function greet(name) {
    return `Hello, ${name} how are you doing today?`;
}

// Цікаві варіанти з Codewars
function greet_(name) {
    return `\x48\x65\x6c\x6c\x6f\x2c\x20${name}\x20\x68\x6f\x77\x20\x61\x72\x65\x20\x79\x6f\x75\x20\x64\x6f\x69\x6e\x67\x20\x74\x6f\x64\x61\x79\x3f`
}
/*
Пояснення від ChatGPT:
Внутри функции используется строковый литерал с использованием экранированных последовательностей Unicode
(в данном случае, шестнадцатеричные коды ASCII) для формирования строки.
*/
// ================================================================================================
// ================================================================================================
//*-Task №23 A Needle in the Haystack (8kyu)
/*
Ви знайдете голку в стозі сіна?
Напишіть функцію findNeedle(), яка приймає масив, повний сміття, але містить одну "голку" (needle)
Після того, як ваша функція знайде голку(needle), вона має повернути повідомлення (у вигляді рядка), яке говорить:
"found the needle at position " плюс індекс, який знайшов голку, отже:
Приклад:
["hay", "junk", "hay", "hay", "moreJunk", "needle", "randomJunk"] --> "знайдено голку в позиції 5"
*/

// Мій варіант
function findNeedle(haystack) {
    return `found the needle at position ${haystack.indexOf('needle')}`;
}
// Цікаві варіанти з Codewars
// Нічого цікавого не знайшов, лише варіації рішення схожого з моїм.
// ================================================================================================
// ================================================================================================
//*-Task №24 Function 1 - hello world (8kyu)
/*
Створіть просту функцію під назвою greet, яка повертає найвідоміше "hello world!".
Очки стилю:
Звичайно, це настільки просто, наскільки це можливо. Але наскільки розумним ви можете бути,
щоб створити найкреативніший "привіт, світ", який тільки можете придумати? Яке рішення
«hello world!» ви хотіли б показати своїм друзям?
*/

// Мій варіант
const greet = () => "hello world!";

// Цікаві варіанти з Codewars
function greet() {
    return "hello world!";
}
// ================================================================================================
// ================================================================================================
//*-Task №25 Opposites Attract (8kyu)
/*
Тіммі та Сара думають, що вони закохані, але про те, де вони живуть, вони дізнаються про це лише
тоді, коли зірвуть по квітці. Якщо на одній квітці парна кількість пелюсток, а на іншій непарна
кількість пелюсток, це означає, що вони закохані.
Напишіть функцію, яка братиме кількість пелюсток кожної квітки та повертатиме значення true, якщо
вони закохані, і значення false, якщо ні.
*/

// Мій варіант
function lovefunc(flower1, flower2) {
    return flower1 % 2 !== flower2 % 2 ? true : false; // return flower1 % 2 !== flower2 - цього достатньо!!
}

// Цікаві варіанти з Codewars
function lovefunc_(flower1, flower2) {
    return (flower1 + flower2) % 2 === 1
}
// ================================================================================================
// ================================================================================================
//*-Task №26 Beginner - Lost Without a Map (8kyu)
/*
Дано масив цілих чисел, повернути новий масив із подвоєнням кожного значення.
Наприклад:
[1, 2, 3] --> [2, 4, 6]
*/

// Мій варіант
function maps(x) {
    let doubledNumbers = x.map(function (num) {
        return num * 2;
    })
    return doubledNumbers;
}

// Цікаві варіанти з Codewars
function maps_(x) {
    return x.map(n => n * 2);
}
//
const maps__ = arr => arr.map( x => x * 2 );
// ================================================================================================
// ================================================================================================
//*-Task №27 Beginner Series #1 School Paperwork (8kyu)
/*
Ваші однокласники попросили вас скопіювати для них деякі документи. Ви знаєте, що є «n» однокласників,
а документи мають «m» сторінок.
Ваше завдання підрахувати, скільки чистих сторінок вам потрібно. Якщо n < 0 або m < 0, поверніть 0.
Приклад:
n=5, m=5:25
n=-5, m=5:0
*/

// Мій варіант
function paperwork(n, m) {
    return n > 0 && m > 0 ? n * m : 0;
}

// Цікаві варіанти з Codewars
const paperwork_ = (n, m) => Math.max(0, n) * Math.max(0, m);
// ================================================================================================
// ================================================================================================
//*-Task №28 Convert a Boolean to a String (8kyu)
/*
Реалізуйте функцію, яка перетворює задане логічне значення в його рядкове представлення.
Примітка. Будуть надані лише дійсні дані.
*/

// Мій варіант
function booleanToString(b) {
    return String(b);
}

// Цікаві варіанти з Codewars
function booleanToString_(b) {
    return b ? 'true' : 'false';
}
//
function booleanToString__(b) {
    return `${b}`
}
// ================================================================================================
// ================================================================================================
//*-Task №29 Beginner Series #2 Clock (8kyu)
/*
Годинник показує h годин, m хвилин і s секунд після півночі.
Ваше завдання — написати функцію, яка повертає час з опівночі в мілісекундах.
приклад:
h = 0
m = 1
s = 1
результат = 61000

Вхідні обмеження:
0 <= h <= 23
0 <= m <= 59
0 <= s <= 59
*/

// Мій варіант
function past(h, m, s) {
    return (h * 3600000) + (m * 60000) + (s * 1000);
}

// Цікаві варіанти з Codewars
function past_(h, m, s) {
    return ((h * 3600) + (m * 60) + s) * 1000;
}
// ================================================================================================
// ================================================================================================
//*-Task №30 Are You Playing Banjo? (8kyu)
/*
Створіть функцію, яка відповідає на питання «Ви граєте на банджо?».
Якщо ваше ім'я починається з літери "R" або малої букви "r", ви граєте на банджо!
Функція приймає назву як єдиний аргумент і повертає один із таких рядків:
name + " plays banjo" 
name + " does not play banjo"
Надані імена завжди є дійсними рядками.
*/

// Мій варіант
function areYouPlayingBanjo(name) {
    return name[0].toLowerCase() === 'r' ? name + " plays banjo" : name + " does not play banjo";
}

// Цікаві варіанти з Codewars
function areYouPlayingBanjo_(name) {
    return name + (name[0].toLowerCase() == 'r' ? ' plays' : ' does not play') + " banjo";
}
//
const areYouPlayingBanjo__ = n => n+(n.match(/^r/i) ? " plays banjo" : " does not play banjo");
// ================================================================================================
// ================================================================================================