//*-Task №101 Student's Final Grade (8kyu)
/*
Створити функцію finalGrade, яка розраховує підсумкову оцінку студента в залежності від двох параметрів:
оцінки за іспит і кількості виконаних робіт.

Ця функція повинна приймати два аргументи: exam - оцінка за іспит (від 0 до 100);
проекти - кількість виконаних проектів (від 0 і вище);

Ця функція має повертати число (кінцева оцінка). Є чотири види підсумкових оцінок:
100, якщо оцінка за іспит більше 90 або якщо кількість виконаних проектів більше 10.
90, якщо оцінка за іспит більше 75 і якщо кількість виконаних робіт не менше 5.
75, якщо оцінка за іспит більше 50 і якщо кількість виконаних робіт не менше 2.
0, в інших випадках
*/

// Мій варіант
function finalGrade(exam, projects) {
    if (exam > 90 || projects > 10) {
        return 100;
    } else if (exam > 75 && projects >= 5) {
        return 90;
    } else if (exam > 50 && projects >= 2) {
        return 75;
    } else {
        return 0;
    }
}

// Цікаві варіанти з Codewars
const finalGrade_ = (exam, projects) => {
    return (
        exam > 90 || projects > 10 ? 100 :
        exam > 75 && projects >= 5 ? 90 :
        exam > 50 && projects >= 2 ? 75 : 0
    )
}

// ================================================================================================
// ================================================================================================
//*-Task №102 Grasshopper - Messi goals function (8kyu)
/*
Функція голів Мессі
Мессі - футболіст з голами в трьох лігах:
LaLiga
Copa del Rey
Champions

Виконайте функцію, щоб повернути його загальну кількість голів у всіх трьох лігах.
Примітка: введені дані завжди будуть дійсними.
Наприклад:
5, 10, 2 --> 17
*/

// Мій варіант
function goals(laLigaGoals, copaDelReyGoals, championsLeagueGoals) {
    return laLigaGoals + copaDelReyGoals + championsLeagueGoals;
}

// Цікаві варіанти з Codewars
const goals_ = (...goalsArray) => goalsArray.reduce((a, b) => a + b);

// ================================================================================================
// ================================================================================================
//*-Task №103 I love you, a little , a lot, passionately ... not at all (8kyu)
/*
Хто пам’ятає часи на шкільному подвір’ї, коли дівчата брали квітку і рвали її пелюстки, промовляючи
кожну з наступних фраз кожного разу, коли пелюстка була зривана:

"I love you"
"a little"
"a lot"
"passionately"
"madly"
"not at all"
Якщо пелюсток більше 6, ви починаєте спочатку: «I love you» для 7 пелюсток, «a little» для 8 пелюсток
і так далі.

Коли була зірвана остання пелюстка, пролунали крики хвилювання, мрії, хвилювання думок і емоцій.
Ваша мета в цьому ката — визначити, яку фразу скажуть дівчата на останній пелюстці для квітки з заданою
кількістю пелюсток. Кількість пелюсток завжди більше 0.
*/

// Мій варіант
function howMuchILoveYou(nbPetals) {
    let petals = ["I love you", "a little", "a lot", "passionately", "madly", "not at all"];
    if(nbPetals <= petals.length) { return petals[nbPetals - 1]};
    if(nbPetals > petals.length && nbPetals % petals.length !== 0) { return petals[nbPetals % petals.length - 1]};
    if(nbPetals > petals.length && nbPetals % petals.length === 0) { return petals[petals.length - 1]};
}

// Цікаві варіанти з Codewars
const phrases = [
    'I love you',
    'a little',
    'a lot',
    'passionately',
    'madly',
    'not at all',
]

function howMuchILoveYou_(n) {
    return phrases[(n - 1) % phrases.length];
}

// ================================================================================================
// ================================================================================================
//*-Task №104 I love you, a little , a lot, passionately ... not at all (8kyu)
/*
Налагодження функції sayHello
Зоряний корабель «Ентерпрайз» зіткнувся з певною проблемою під час створення програми для вітання
всіх, хто підійде на борт. Ваше завдання — виправити код і повернути програму до роботи!

Приклад результату:
Hello, Mr. Spock
*/

// Мій варіант
function sayHello(name) {
    return `Hello, ${name}`;
}

// Цікаві варіанти з Codewars
function sayHello_(name) {
    return 'Hello, '.concat(name);
}
// ================================================================================================
// ================================================================================================
//*-Task №105 Sort and Star (8kyu)
/*
Вам буде надано список рядків. Ви повинні відсортувати його за алфавітом (з урахуванням регістру
та на основі значень ASCII символів), а потім повернути перше значення.

Повернене значення має бути рядком із символом "***" між літерами.
Ви не повинні видаляти або додавати елементи з/до масиву.
*/

// Мій варіант
function twoSort(s) {
    return s.sort()[0].split('').join('***');
}

// Цікаві варіанти з Codewars
const twoSort_ = s => [...s.sort()[0]].join('***');
// ================================================================================================
// ================================================================================================
//*-Task №106 To square(root) or not to square(root) (8kyu)
/*
Напишіть метод, який отримуватиме масив цілих чисел як параметр і оброблятиме кожне число
з цього масиву.
Поверніть новий масив, обробивши кожне число вхідного масиву таким чином:
Якщо число має цілий квадратний корінь, візьміть його, інакше підведіть число до квадрата.

Приклад
[4,3,9,7,2,1] -> [2,9,3,49,4,1]
Примітки
Вхідний масив завжди міститиме лише додатні числа і ніколи не буде порожнім або нульовим.
*/

// Мій варіант
function squareOrSquareRoot(array) {
    return array.map(n => Number.isInteger(Math.sqrt(n)) ? Math.sqrt(n) : n * n);
}
// Цікаві варіанти з Codewars
function squareOrSquareRoot_(array) {
    return array.map(x => {
        const r = Math.sqrt(x);
        return (r % 1 == 0) ? r : (x * x);
    });
}
// ================================================================================================
// ================================================================================================
//*-Task №107 Training JS #7: if..else and ternary operator (8kyu)
/*
Функція saleHotdogs приймає 1 параметр: n,
n — це кількість хот-догів, які придбає клієнт, різні номери мають різні ціни (див. наступну таблицю).
Функція повертає, скільки грошей витратить клієнт, щоб купити це кількість хот-догів.

Кількість хот-догів ціна за одиницю (центи):
n < 5  -> 100
n >= 5 і n < 10  -> 95
n >= 10  -> 90
*/

// Мій варіант
function saleHotdogs(n) {
    return n * (n >= 10 ? 90 : n < 5 ? 100 : 95);
}

// Цікаві варіанти з Codewars
function saleHotdogs(n) {
    return n * (n < 5 ? 100 : n < 10 ? 95 : 90);
}
// ================================================================================================
// ================================================================================================
//*-Task №108 Grasshopper - Terminal game move function (8kyu)
/*
Функція переміщення термінальної гри
У цій грі герой рухається зліва направо. Гравець кидає кубик і два рази пересуває кількість клітинок,
вказану кубиком.
Створіть функцію для термінальної гри, яка бере поточну позицію героя та кидок (1-6) і повертає нову
позицію.

Приклад:
move(3, 6) має дорівнювати 15
*/

// Мій варіант
function move(position, roll) {
    return roll * 2 + position;
}

// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-залишилось 274шт