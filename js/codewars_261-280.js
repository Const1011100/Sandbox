//*-Task №261 Pythagorean Triple (8kyu)
/*
Дано невідсортований масив із 3 натуральних чисел [ n1, n2, n3 ], визначте,
чи можна сформувати трійку Піфагора, використовуючи ці 3 цілі числа.

Трійка Піфагора складається з розташування 3 цілих чисел таким чином, що:

a2 + b2 = c2

Приклади
[5, 3, 4] : можна сформувати трійку Піфагора, використовуючи ці 3 цілі числа: 32 + 42 = 52
[3, 4, 5] : можна сформувати трійку Піфагора, використовуючи ці 3 цілі числа: 32 + 42 = 52
[13, 12, 5] : можна сформувати трійку Піфагора, використовуючи ці 3 цілі числа: 52 + 122 = 132
[100, 3, 999] : НЕможливо сформувати піфагорову трійку, використовуючи ці 3 цілих числа -
як би ви їх не розташували, ви ніколи не знайдете способу задовольнити рівняння a2 + b2 = c2

Повернуті значення
Для JavaScript: повертає true або false
*/

// Мій варіант
function isPythagoreanTriple(integers) {
    const arr = integers.sort((a, b) => a - b);
    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);
}

// Цікаві варіанти з Codewars
function isPythagoreanTriple_(nums) {
    const [a, b, c] = nums.sort((a, b) => a - b)
    return a ** 2 + b ** 2 === c ** 2
}
// ================================================================================================
// ================================================================================================
//*-Task №262 Compare within margin (8kyu)
/*
Створіть функцію close_compare, яка приймає 3 параметри: a, b і необов’язкове поле.
Функція має повертати значення a менше, близько до або вище b.

Зверніть увагу на наступне:

Коли a близьке до b, поверніть 0.
Для цього завдання a вважається «близьким до» b, якщо маржа більша або дорівнює абсолютній відстані
між a і b.
Інакше...

Якщо a менше b, поверніть -1.
Якщо a більше b, повертається 1.
Якщо маржа не вказана, розглядайте її як нульову.
Припустимо: запас >= 0

Порада. У деяких мовах є спосіб зробити параметри необов’язковими.
Приклад 1
Якщо a = 3, b = 5 і margin = 3, то close_compare(a, b, margin) має повернути 0.
Це пояснюється тим, що a і b віддалені один від одного не більше ніж на 3 числа.

Приклад 2
Якщо a = 3, b = 5 і margin = 0, тоді close_compare(a, b, margin) має повернути -1.
Це тому, що відстань між a і b більша за 0, а a менша за b.
*/

// Мій варіант
function closeCompare(a, b, margin = 0) {
    if (Math.abs(a - b) <= margin) {
        return 0;
    } else if (a < b) {
        return -1;
    } else {
        return 1;
    }
}

// Цікаві варіанти з Codewars
function closeCompare_(a, b, m = 0) {
    return Math.abs(a - b) <= m ? 0 : Math.sign(a - b);
}
// ================================================================================================
// ================================================================================================
//*-Task №263 Basic subclasses - Adam and Eve (8kyu)
/*
Згідно з міфами про створення авраамічних релігій, Адам і Єва були першими людьми, які блукали Землею.
Ви повинні виконувати Божу роботу. Метод створення повинен повертати масив довжиною 2, що містить об’єкти
(що представляють Адама і Єву). Перший об’єкт у масиві має бути екземпляром класу Man.
Другий має бути екземпляром класу Woman. Обидва об’єкти мають бути підкласами Human.
Ваше завдання — реалізувати класи «Людина», «Чоловік» і «Жінка».
*/

// Мій варіант


// Цікаві варіанти з Codewars
class God {
    static create() {
        return [new Man('Adam'), new Woman('Eve')]
    }
}

class Human {
    constructor(name) {
        this.name = name;
    }
}

class Man extends Human {
    constructor(name) {
        super(name);
    }
}

class Woman extends Human {
    constructor(name) {
        super(name);
    }
}
// ================================================================================================
// ================================================================================================
//*-Task №264 Training JS #12: loop statement --for..in and for..of (8kyu)
/*
Функція giveMeFive приймає 1 параметр, obj, який є об’єктом.
Створіть масив (який ви зрештою повернете). Потім перегляньте об’єкт, перевіряючи кожен ключ і значення.
Якщо довжина ключа дорівнює 5, то натисніть ключ на свій масив.
Окремо, якщо довжина значення дорівнює 5, тоді надішліть значення у свій масив.

Наприкінці поверніть свій масив.
Ви повинні використовувати for..in у своєму коді, інакше ваше рішення може не прийняти цю ката.
*/

// Мій варіант
function giveMeFive(obj) {
    const result = [];
    for (let elem in obj) {
        if(elem.length === 5) { result.push(elem) };
        if(obj[elem].length === 5) { result.push(obj[elem]) };
    }
    return result;
}

// Цікаві варіанти з Codewars
const giveMeFive_ = obj =>
    Object              // converting instead for ( in )
        .entries(obj)
        .join(',')
        .split(',')
        .filter(i => i.length == 5);

// ================================================================================================
// ================================================================================================
//*-Task №265 Pirates!! Are the Cannons ready!?? (8kyu)
/*
Привіт, Матей!
Ласкаво просимо до семи морів.
Ви капітан піратського корабля.
Ви в битві проти королівського флоту.
У вас напоготові гармати... чи не так?
Ваше завдання перевірити, чи заряджені та готові артилеристи, чи вони: Вогонь!
Якщо вони не готові: Shiver me timbers!
Ваші стрільці для кожного тесту 2, 3 або 4.
Коли ви перевіряєте, чи вони готові, їх відповіді зберігаються в словнику та будуть такими: так або ні
Стріляти з меншою кількістю готових стрільців є неоптимальним (це не вогонь за власним бажанням,
це вогонь за наказом капітана або стріляти по дошці, брудний морський пес!)
Якщо всі відповіді "так", то Fire! якщо один або кілька "ні", тоді Shiver me timbers!
*/

// Мій варіант
const cannonsReady = (gunners) => {
    for (var i in gunners) {
        if (gunners[i] === "nay") {
            return "Shiver me timbers!"
        }
    }
    return "Fire!"
}

// Цікаві варіанти з Codewars


// ================================================================================================
// ================================================================================================
//*-Task №266 Training JS #18: Methods of String object--concat() split() and its good friend join() (8kyu)
/*
Реалізуйте функцію, яка приймає 2 аргументи: рядок і роздільник.
Очікуваний алгоритм: розбити рядок на слова за пробілами, розбити кожне слово на окремі символи та з’єднати
їх за допомогою вказаного роздільника, з’єднати всі отримані «слова» назад у речення з пробілами.
*/

// Мій варіант
function splitAndMerge(string, separator) {
    const words = string.split(' ');
    const result = words.map(word => {
        return word.split('').join(separator);
    })
    return result.join(' ');
}

// Цікаві варіанти з Codewars


// ================================================================================================
// ================================================================================================
//*-Task №267 Geometry Basics: Distance between points in 2D (8kyu)
/*
Ця серія ката познайомить вас з основами виконання геометрії за допомогою комп’ютера.
Точкові об’єкти мають атрибути x і y.
Напишіть функцію, що обчислює відстань між точками a і b.
Введені координати відповідають діапазону −50⩽x,y⩽50.
Тести порівнюють очікуваний результат і фактичну відповідь з допуском 1e-6.
*/

// Мій варіант
function distanceBetweenPoints(a, b) {
    const dx = a.x - b.x;
    const dy = a.y - b.y;
    return Math.sqrt(dx * dx + dy * dy);
}

// Цікаві варіанти з Codewars
function distanceBetweenPoints_(a, b) {
    return Math.hypot(a.x - b.x, a.y - b.y);
}

// ================================================================================================
// ================================================================================================
//*-Task №268 They say that only the name is long enough to attract attention. They also said that only a simple Kata will have someone to solve it. This is a sadly story #1: Are they opposite? (8kyu)
/*
Дайте вам два рядки: s1 і s2. Якщо вони протилежні, поверніть true; інакше поверніть false.
Примітка. Результат має бути логічним значенням, а не рядком.
Протилежне означає: усі літери двох рядків однакові, але регістр протилежний. ви можете припустити,
що рядок містить лише літери або це порожній рядок. Також зверніть увагу на граничний регістр - якщо обидва
рядки порожні, ви повинні повернути false.
"ab","AB"     -> true
"aB","Ab"     -> true
"aBcd","AbCD" -> true
"AB","Ab"     -> false
"",""         -> false
*/

// Мій варіант
function isOpposite(s1, s2) {
    if (s1 === '' || s2 === '') { return false };
    if (s1.length !== s2.length) { return false };
    for (let i = 0; i < s1.length; i++) {
        if (s1[i].toLowerCase() !== s2[i].toLowerCase()) { return false };
        if (s1[i] === s2[i]) {
            return false;
        }
    }
    return true;
}
// Цікаві варіанти з Codewars
function isOpposite_(s1, s2) {
    return s1.split('')
        .map(c => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase())
        .join('') === s2 && s1 !== '';
}
//*-Task №269 Unexpected parsing (8kyu)
/*
Очікувана поведінка
Функція має повертати словник/об’єкт/хеш із «статусом» як ключем, значення якого може бути «зайнятий» або
«доступний», залежно від істинного значення аргументу is_busy.
Але, як ви побачите, натиснувши кнопку ЗАПУСТИТИ або СПРОБУВАТИ, у цьому коді є кілька помилок, виправте їх.
*/

// Мій варіант
function getStatus(isBusy) {
    var msg = (isBusy ? "busy" : "available");
    return { status: msg }
}
// Цікаві варіанти з Codewars


// ================================================================================================
// ================================================================================================
//*-Task №270 Training JS #9: loop statement --while and do..while (8kyu)
/*
Повна функція padIt, яка приймає 2 параметри:
str: рядок, що представляє рядок для заповнення. Ми доповнимо його символами «*» з лівого та правого боку.
n: число, що вказує, скільки разів доповнити рядок.
Поведінка
Вам потрібно написати оператор циклу у функції, яка виконується n разів.
Щоразу під час проходження циклу він додає одну * до str, змінюючи, з якого боку вона доповнена:
перший раз додає * до лівої сторони str, другий раз додає * до правої сторони і так далі .
Нарешті, поверніть доповнений рядок.
*/

// Мій варіант
function padIt(str, n) {
    let paddedStr = str;
    let i = 0;
    while (i < n) {
        if (i % 2 === 0) {
            paddedStr = '*' + paddedStr;
        } else {
            paddedStr = paddedStr + '*';
        }
        i++;
    }
    return paddedStr;
}
// Цікаві варіанти з Codewars


// ================================================================================================
// ================================================================================================
//*-Task №271 NBA full 48 minutes average (8kyu)
/*
Гра NBA триває 48 хвилин (чотири чверті по 12 хвилин).
Гравці, як правило, не грають у повну гру, замінюючись і виходячи за потреби.
Ваше завдання — екстраполювати очки гравця за гру, якщо він грав усі 48 хвилин.

Напишіть функцію, яка приймає два аргументи, ppg (очки за гру) і mpg (хвилини за гру) і повертає
пряму екстраполяцію ppg за 48 хвилин, округлену до найближчої десятої. Повернути 0, якщо 0.
pointsPer48(12, 20) // 28.8
pointsPer48(10, 10) // 48 
pointsPer48(5, 17) // 14.1 
pointsPer48(0, 0) // 0
Примітки:
Усі вхідні дані будуть або цілими, або плаваючими.
Йди за своїми мріями! 
*/

// Мій варіант
function pointsPer48(ppg, mpg) {
    if (ppg === 0 || mpg === 0) { return 0 };
    return Math.round((ppg / mpg) * 48 * 10) / 10;
  }
// Цікаві варіанти з Codewars
const pointsPer48_ = (ppg, mpg) => mpg ? +(ppg * 48 / mpg).toFixed(1) : 0;

// ================================================================================================
// ================================================================================================
//*-Task №272 Evil or Odious (8kyu)
/*
Число n є Злим, якщо воно має парне число одиниць у своєму двійковому представленні.
Перші кілька лихих чисел: 3, 5, 6, 9, 10, 12, 15, 17, 18, 20

Число n є одіозним, якщо воно має непарне число одиниць у своєму двійковому представленні.
Перші кілька одіозних чисел: 1, 2, 4, 7, 8, 11, 13, 14, 16, 19

Ви повинні написати функцію, яка визначає, чи є число Evil of Odious,
функція має повертати "It's Evil!" у разі злого числа та "It's Odious!" у разі одіозного числа.
Удачі :)
*/

// Мій варіант
function evil(n) {
    const str = n.toString(2);
    return str.match(/1/g).length % 2 === 0 ? "It's Evil!" : "It's Odious!";
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №273 Training JS #11: loop statement --break,continue (8kyu)
/*
Кодування у функції grabDoll. функція приймає 1 параметр: dolls. це рядковий масив, список деяких ляльок.
Вам потрібні ляльки траверсу за допомогою циклу for.
Якщо елемент «Hello Kitty» або «Barbie doll», ви повинні помістити його в сумку (сумка — це масив, я визначив у функції);
якщо це інші рядки, ми повинні використовувати продовження, пропустити його.

Коли в мішку є три елементи, мішок повний. Ви повинні використовувати break jump out the loop;
Якщо мішок неповний, потрібно обійти ляльок до останнього елемента.

Поверніть сумку після завершення циклу for.
Ви повинні використовувати for, break і continue у своєму коді. інакше ваше рішення може не пройти цю ката.
*/

// Мій варіант
function grabDoll(dolls) {
    var bag = [];
    for (let i = 0; i < dolls.length; i++) {
        if (bag.langth < 3) { continue };
        if (bag.length === 3) { break };
        if (dolls[i] === "Hello Kitty" || dolls[i] === "Barbie doll") {
            bag.push(dolls[i]);
        }
    }
    return bag;
}
// Цікаві варіанти з Codewars
function grabDoll_(dolls) {
    var bag = [];
    for (var i = 0; i < dolls.length; i++) {
        if (dolls[i] === "Hello Kitty" || dolls[i] === "Barbie doll")
            bag.push(dolls[i]);
        else
            continue;
        if (bag.length === 3) break;
    }
    return bag;
}
// ================================================================================================
// ================================================================================================
//*-Task №274 Fuel Calculator: Total Cost (8kyu)
/*
У цьому ката вам доведеться написати функцію, яка приймає літри та ціну за літр (у доларах) як аргументи.
При покупці 2 або більше літрів надається знижка 5 центів за літр,
при покупці 4 і більше літрів – 10 центів за літр,
і так кожні два літри, до максимальної знижки 25 центів за літр.
Але загальна знижка на літр не може перевищувати 25 центів.
Поверніть загальну вартість, округлену до 2 знаків після коми.
Також ви можете здогадатися, що від’ємних або нечислових вводів не буде.
*/

// Мій варіант
function fuelPrice(litres, pricePerLitre) {
    let discount = 0;
    if (litres >= 10) {
        discount = 0.25;
    } else if (litres >= 8) {
        discount = 0.20;
    } else if (litres >= 6) {
        discount = 0.15;
    } else if (litres >= 4) {
        discount = 0.10;
    } else if (litres >= 2) {
        discount = 0.05;
    }
    return Number((litres * (pricePerLitre - discount)).toFixed(2));
}
// Цікаві варіанти з Codewars
function fuelPrice_(litres, pricePerLiter) {
    for (var i = 2; i <= 10; i += 2) { //discount loop
        if (litres >= i) {
            pricePerLiter -= 0.05;
        }
    }
    return Math.round(litres * pricePerLiter * 100) / 100;;
}
//
function fuelPrice__(litres, pricePerLiter) {
    var discount = Math.min(Math.floor(litres / 2) * 0.05, 0.25);
    var price = litres * (pricePerLiter - discount);
    return Math.round(price * 100) / 100;
}
// ================================================================================================
// ================================================================================================
//*-Task №275 Grasshopper - Order of operations (8kyu)
/*
Порядок операцій Grasshopper
Ви виконуєте обчислення 2 + 2 * 2 + 2 * 2 і очікуєте отримати відповідь 32, але натомість функція
продовжує повертати 10. Виправте функцію, щоб вона повертала 32, не змінюючи числа чи операторів.
*/

// Мій варіант
function orderOperations() {
    return (2 + 2) * (2 + 2) * 2;
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №276 Grasshopper - Terminal Game #1 (8kyu)
/*
Термінальна гра - Створення прототипу героя
У цьому першому ката серії вам потрібно визначити прототип героя, який буде використовуватися в
термінальній грі. Герой повинен мати такі атрибути:

значення атрибута
ім'я аргументу користувача або "Герой"
позиція '00'
здоров'я 100
пошкодження 5
досвід 0
*/

// Мій варіант
function Hero(name = 'Hero') {
    this.name = name;
    this.position = '00';
    this.health = 100;
    this.damage = 5;
    this.experience = 0;
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №277 Switch/Case - Bug Fixing #6 (8kyu)
/*
О ні! Функція evalObject Тіммі не працює. Він використовує Switch/Cases для оцінки даних властивостей
об’єкта, чи можете ви виправити функцію Тіммі?
*/

// Мій варіант
function evalObject(value) {
    switch (value.operation) {
        case '+': return value.a + value.b;
        case '-': return value.a - value.b;
        case '/': return value.a / value.b;
        case '*': return value.a * value.b;
        case '%': return value.a % value.b;
        case '^': return Math.pow(value.a, value.b);
    }
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №278 Polish alphabet (8kyu)
/*
У польському алфавіті 32 літери: 9 голосних і 23 приголосних.
Ваше завдання поміняти літери діакритичними знаками:
ą -> a,
ć -> c,
ę -> e,
ł -> l,
ń -> n,
ó -> o,
ś -> s,
ź -> z,
ż -> z
і роздрукуйте рядок без використання польських літер.
Наприклад:
"Jędrzej Błądziński"  -->  "Jedrzej Bladzinski"
*/

// Мій варіант
function correctPolishLetters(string) {
    const letters = {
        'ą': 'a',
        'ć': 'c',
        'ę': 'e',
        'ł': 'l',
        'ń': 'n',
        'ó': 'o',
        'ś': 's',
        'ź': 'z',
        'ż': 'z'
    };

    return string
        .split('')
        .map(char => letters[char] || char)
        .join('');
}
// Цікаві варіанти з Codewars
function correctPolishLetters_(string) {
    var dict = { 'ą': 'a', 'ć': 'c', 'ę': 'e', 'ł': 'l', 'ń': 'n', 'ó': 'o', 'ś': 's', 'ź': 'z', 'ż': 'z' };
    return string.replace(/[ąćęłńóśźż]/g, match => dict[match]);
}
// ================================================================================================
// ================================================================================================
//*-залишилось 104шт
// console.time('timer_1');
// console.timeEnd('timer_1');