//*-Task №481 Create the base - Dungeon crawler #1 (7kyu)
/*
Створіть базу - Dungeon crawler #1
Ласкаво просимо до серії Dungeon crawler! У вас і ваших друзів виникла чудова ідея створити цей
чудовий текстовий сканер підземель для шкільного проекту. Оскільки ви вже професійний програміст,
вам дали завдання створити логіку та графіку (оскільки це лише текстова гра). По-перше, ви повинні
створити основу гри, вступ, ініціалізацію змінних, усі важливі базові речі!

завдання
Ваше завдання — створити всі базові класи, які ми будемо використовувати, використовуючи чотири
класи ```Game```, ```Player```, ```Monster``` і ```Map```.

Введення

Game
Параметри
name – параметр name буде використано для переходу до класу ```Player```, який потім зберігатиметься
в імені властивості ```player```.

level – Параметр рівня використовуватиметься для визначення складності гри, його потрібно зберегти у
властивості під назвою ```level```. Це має мати значення за замовчуванням 0.
ПОПЕРЕДЖЕННЯ: Ви також можете отримати рядок числа, якщо його розібрати, але якщо вам надано щось інше,
ніж дійсне int, тоді за замовчуванням 0

Властивості
player - Це має бути новий клас Player з назвою, яка використовується як параметр.
level - має зберігати рівень, переданий у конструктор.
floors - поки що це має бути порожній масив.

Player
Параметри
name – параметр name буде використано для переходу до класу ```Player```, який потім зберігатиметься
в імені властивості ```player```. Це має мати значення за замовчуванням "Player", якщо ім'я нульове,
порожнє або не є рядком.

Властивості
name - властивість name має бути ініціалізована параметром name, але якщо ім'я нульове або порожнє,
ви повинні використовувати 'Player'
health - властивість здоров'я повинна мати значення за замовчуванням ```100.00```
position - позиція повинна мати значення за замовчуванням об'єкта, який виглядає приблизно так: ```{x:0, y:0}```
damage - значення за замовчуванням пошкодження має бути ```10.00```
luck - удача повинна мати значення за замовчуванням ```1.00```

Monster
Параметри
рівень – Параметр рівня використовуватиметься для визначення складності гри, його потрібно зберегти у
властивості під назвою ```рівень```.

Властивості
level - має зберігати рівень, переданий у конструктор.

Map
Параметри
рівень – Параметр рівня використовуватиметься для визначення складності гри, його потрібно зберегти у
властивості під назвою ```рівень```.
Властивості
level - має зберігати рівень, переданий у конструктор.
*/

// Мій варіант
class Game {
    constructor(name, level = 0) {
        this.player = new Player(name);
        this.level = Number.isInteger(parseInt(level)) ? parseInt(level) : 0;
        this.floors = [];
    }
}

class Player {
    constructor(name = "Player") {
        this.name = typeof name === 'string' && name.trim() !== '' ? name : "Player";
        this.health = 100.00;
        this.position = { x: 0, y: 0 };
        this.damage = 10.00;
        this.luck = 1.00;
    }
}

class Monster {
    constructor(level) {
        this.level = level;
    }
}

class Map {
    constructor(level) {
        this.level = level;
    }
}

// Цікаві варіанти з Codewars
class Game {
    constructor(name, level = 0) {
        this.player = new Player(name);
        this.level = +level || 0;
        this.floors = [];
    }
}

class Player {
    constructor(name = 'Player') {
        this.name = typeof (name) !== 'string' || name == '' ? 'Player' : name;
        this.health = 100.00;
        this.position = { x: 0, y: 0 };
        this.damage = 10.00;
        this.luck = 1.00;
    }
}

class Monster {
    constructor(level) {
        this.level = level;
    }
}

class Map {
    constructor(level) {
        this.level = level;
    }
}
// ================================================================================================
// ================================================================================================
//*-залишилось 1885шт
// console.time('timer_1');
// console.timeEnd('timer_1');