//*-Task №441 Factorial (7kyu)
/*
У математиці факторіал цілого невід’ємного числа n, що позначається n!, є добутком усіх натуральних
чисел, менших або рівних n. Наприклад: 5! = 5 * 4 * 3 * 2 * 1 = 120. За домовленістю значення 0! дорівнює 1.

Напишіть функцію для обчислення факторіалу для заданого вхідного параметра.
Якщо вхідні дані нижче 0 або вище 12, викидайте виняток типу ArgumentOutOfRangeException (C#) або
IllegalArgumentException (Java) чи RangeException (PHP) або викидайте RangeError (JavaScript)
чи ValueError (Python) або повертайте -1 (C).
*/

// Мій варіант
function factorial(n) {
    if (n < 0 || n > 12) {
        throw new RangeError("Input should be between 0 and 12 inclusive.");
    }
    let factorial = 1;
    for (let i = 1; i <= n; i++) {
        factorial *= i;
    }
    return factorial;
}

// Цікаві варіанти з Codewars
function factorial_(n) {
    if (n < 0 || n > 12)
        throw new RangeError();
    return n <= 1 ? 1 : n * factorial(n - 1);
}
// ================================================================================================
// ================================================================================================
//*-Task №442 Check the exam (7kyu)
/*
Перший вхідний масив є ключем до правильних відповідей на іспиті, наприклад ["a", "a", "b", "d"].
Другий містить надіслані студентом відповіді.

Два масиви не порожні та мають однакову довжину. Поверніть оцінку для цього масиву відповідей,
даючи +4 для кожної правильної відповіді, -1 для кожної неправильної відповіді та +0 для кожної пустої
відповіді, представленої у вигляді порожнього рядка (у C використовується символ пробілу).

Якщо оцінка < 0, поверніть 0.

Наприклад:
    Correct answer    |    Student's answer   |   Result         
 ---------------------|-----------------------|-----------
 ["a", "a", "b", "b"]   ["a", "c", "b", "d"]  →     6
 ["a", "a", "c", "b"]   ["a", "a", "b", "" ]  →     7
 ["a", "a", "b", "c"]   ["a", "a", "b", "c"]  →     16
 ["b", "c", "b", "a"]   ["" , "a", "a", "c"]  →     0
*/

// Мій варіант
function checkExam(array1, array2) {
    let score = 0;
    for (let i = 0; i < array1.length; i++) {
        if (array1[i] === array2[i]) {
            score += 4;
        }
        if (array1[i] !== array2[i] && array2[i] !== '') {
            score -= 1;
        }
    }
    return score > 0 ? score : 0;
}

// Цікаві варіанти з Codewars
const checkExam_ = (x, y) => (x = y.reduce((s, e, i) => s + (e === x[i] ? 4 : e === '' ? 0 : -1), 0)) > 0 ? x : 0;
// ================================================================================================
// ================================================================================================
//*-Task №443 Summing a number's digits (7kyu)
/*
Напишіть функцію sumDigits, яка приймає число як вхідні дані та повертає суму абсолютного значення
кожної десяткової цифри числа.

Наприклад: (Вхід --> Вихід)
10 --> 1
99 --> 18
-32 --> 5
Припустимо, що всі числа у вхідних даних будуть цілими.
*/

// Мій варіант
function sumDigits(number) {
    return Math.abs(number)
        .toString()
        .split('')
        .reduce((sum, num) => sum + Number(num), 0);
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №444 Fix string case (7kyu)
/*
У цій ката вам буде надано рядок, у якому можуть бути змішані великі та малі літери, і ваше завдання
полягає в тому, щоб перетворити цей рядок лише на нижній або лише на верхній регістр на основі:

вносити якомога менше змін.
якщо рядок містить однакову кількість великих і малих літер, перетворити рядок на нижній регістр.
Наприклад:
solve("coDe") = "code". Малі символи > великі. Змініть лише «D» на малі літери.
solve("CODe") = "CODE". Великі символи > малі. Змініть лише «е» на велику.
solve("coDE") = "code". Великі == малі літери. Змінити все на малі літери.
*/

// Мій варіант
function solve(s){
    let low = 0;
    let up = 0;
    const targetStr = s.toLowerCase();
    for (let i = 0; i < s.length; i++) {
        s[i] === targetStr[i] ? low++ : up++;
    }
    return low >= up ? targetStr : s.toUpperCase();
}
// Цікаві варіанти з Codewars
function solve_(s) {
    let upper = s.split('').filter(x => x === x.toUpperCase()).length
    let lower = s.length - upper
    return (upper > lower) ? s.toUpperCase() : s.toLowerCase()
}
//
const solve__ = s => s.replace(/[A-Z]/g,'').length < s.length/2 ? s.toUpperCase() : s.toLowerCase()
// ================================================================================================
// ================================================================================================
//*-Task №445 Form The Minimum (7kyu)
/*
Дано список цифр, поверніть найменше число, яке можна сформувати з цих цифр,
використовуючи цифри лише один раз (ігноруйте дублікати).

Примітки:
До функції будуть передані лише додатні цілі числа (> 0), жодних негативних або нулів.
Вхід >> Вихід Приклади
minValue ([1, 3, 1])  ==> return (13)
minValue([5, 7, 5, 9, 7])  ==> return (579)
minValue([1, 9, 3, 1, 7, 4, 6, 6, 7]) return  ==> (134679)
*/

// Мій варіант
function minValue(values) {
    const uniqueNumbersObj = new Set(values)
    const uniqueNumbersArray = Array.from(uniqueNumbersObj);
    return Number(uniqueNumbersArray.sort((a, b) => a - b).join(''));
}
// Цікаві варіанти з Codewars
function minValue_(values) {
    let arr = Array.from(new Set(values))
    return parseInt(arr.sort().join(''))
}
//
function minValue__(values) {
    return Number(Array.from(new Set(values)).sort().join(''))
}
// ================================================================================================
// ================================================================================================
//*-Task №446 Maximum Multiple (7kyu)
/*
Дано дільник і межу. Знайдіть найбільше ціле число N, таке, що

Умови:
N ділиться на дільник
N менше або дорівнює обмеженню
N більше за 0.

Примітки
Параметри (дільник, межа), що передаються до функції, є лише додатними значеннями.
Гарантовано, що дільник знайдено.

Приклад:
дільник = 2, межа = 7 ==> повернення (6)
Пояснення:
(6) ділиться на (2) , (6) менше або дорівнює межі (7) , а (6) > 0 .

divisor = 10, bound = 50 ==> return (50)
divisor = 37, bound = 200 ==> return (185)
*/

// Мій варіант
function maxMultiple(divisor, bound) {
    return bound - bound % divisor;
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-залишилось 1917шт
// console.time('timer_1');
// console.timeEnd('timer_1');