//*-Task №701 (7kyu)
/*
У вашому класі ви розпочали уроки арифметичної прогресії. Оскільки ви також програміст,
ви вирішили написати функцію, яка повертатиме перші n елементів послідовності із заданою
спільною різницею d та першим елементом a. Зверніть увагу, що різниця може дорівнювати нулю!

Результатом має бути рядок чисел, розділених комою та пробілом.

Приклад
# first element: 1, difference: 2, how many: 5
arithmetic_sequence_elements(1, 2, 5) == "1, 3, 5, 7, 9"
*/

// Мій варіант
function arithmeticSequenceElements(a, d, n) {
  let result = [];
  for (let i = 0; i < n; i++) {
    result.push(a + i * d);
  }
  return result.join(', ');
}
// Цікаві варіанти з Codewars
function arithmeticSequenceElements_(a, r, n) {
  var ret = [a];
  while (--n) ret.push((a += r));
  return ret.join(', ');
}
// ================================================================================================
// ================================================================================================
//*-Task №702 Basic Sequence Practice (7kyu)
/*
Послідовність або ряд у математиці — це рядок об'єктів, таких як числа, які відповідають певному
шаблону. Окремі елементи послідовності називаються членами.
Простий приклад — 3, 6, 9, 12, 15, 18, 21, ..., де шаблон такий: «додати 3 до попереднього члена».

У цьому ката ми будемо використовувати складнішу послідовність: 0, 1, 3, 6, 10, 15, 21, 28, ...
Ця послідовність генерується за шаблоном: «n-й член — це сума чисел від 0 до n включно».
[ 0,  1,    3,      6,   ...]
  0  0+1  0+1+2  0+1+2+3

Ваше завдання
Виконайте функцію, яка приймає ціле число n та повертає масив довжини abs(n) + 1 з арифметичного ряду,
описаного вище. Коли n < 0, поверніть послідовність з від'ємними членами.

Приклади
 5  -->  [0,  1,  3,  6,  10,  15]
-5  -->  [0, -1, -3, -6, -10, -15]
 7  -->  [0,  1,  3,  6,  10,  15,  21,  28]
*/

// Мій варіант
function sumOfN(n) {
  const result = [];
  if (n < 0) {
    for (let i = -1; i >= n - 1; i--) {
      const triangularNumber = ((i * (i + 1)) / 2) * -1;
      result.push(triangularNumber);
    }
  }
  for (let i = 0; i <= n; i++) {
    const triangularNumber = (i * (i + 1)) / 2; // формула Трикутного числа
    result.push(triangularNumber);
  }
  return result;
}
// Цікаві варіанти з Codewars
function sumOfN_(n) {
  var array = [];
  array[0] = 0;
  for (var i = 1; i < Math.abs(n) + 1; i++) {
    if (n > 0) array[i] = array[i - 1] + i;
    else array[i] = array[i - 1] - i;
  }
  return array;
}
//
function sumOfN__(n) {
  for (var i = 0, list = []; i <= Math.abs(n); i++) {
    list.push((list[i - 1] || 0) + i * (n < 0 ? -1 : 1));
  }

  return list;
}
// ================================================================================================
// ================================================================================================
//*-Task №703 Complete The Pattern #1 (7kyu)
/*
Вам потрібно написати функцію-шаблон, яка повертає наступний шаблон до n рядків.

Якщо n < 1, то має повертатися "", тобто порожній рядок.
У шаблоні немає пробілів.
Шаблон:
1
22
333
....
.....
nnnnnn

Приклади:
pattern(5):
1
22
333
4444
55555
*/

// Мій варіант
function pattern(n) {
  return Array.from({ length: n }, (_, i) => String(i + 1).repeat(i + 1)).join(
    '\n'
  );
}

// Цікаві варіанти з Codewars
function pattern_(n) {
  var res = [],
    i;
  for (i = 1; i <= n; i++) {
    res.push(Array(i + 1).join(i));
  }
  return res.join('\n');
}
// ================================================================================================
// ================================================================================================
//*-Task №704 Jumping Number (Special Numbers Series #4) (7kyu)
/*
Стрибкове число — це число, всі сусідні цифри якого відрізняються на 1.
Дано число. Знайдіть, чи воно стрибає, чи ні.

Передане число завжди додатне.
Повернути результат у вигляді рядка (String).
Різниця між «9» та «0» не вважається 1.
Усі одноцифрові числа вважаються числами зі стрибками.

jumpingNumber(9) ==> return "Jumping!!"
jumpingNumber(79) ==> return "Not!!"
jumpingNumber(23) ==> return "Jumping!!"
jumpingNumber(556847) ==> return "Not!!"
jumpingNumber(4343456) ==> return "Jumping!!"
jumpingNumber(89098) ==> return "Not!!"
jumpingNumber(32) ==> return "Jumping!!"
*/

// Мій варіант
function jumpingNumber(n) {
  if (n < 10) {
    return 'Jumping!!';
  }

  const arr = `${n}`.split('').map(Number);

  for (let i = 1; i < arr.length; i++) {
    if (Math.abs(arr[i] - arr[i - 1]) !== 1) {
      return 'Not!!';
    }
  }

  return 'Jumping!!';
}
// Цікаві варіанти з Codewars
const jumpingNumber_ = (n) =>
  n.toString().split``.every((e, i, a) => i < 1 || Math.abs(e - a[i - 1]) === 1)
    ? 'Jumping!!'
    : 'Not!!';
// ================================================================================================
// ================================================================================================
//*-Task №705 Sum ALL the arrays! (7kyu)
/*
Вам задано масив значень.
Підсумуйте всі числові значення в масиві та будь-які вкладені масиви (до будь-якої глибини).
Ігноруйте всі інші типи значень.
*/

// Мій варіант
function arraySum(arr) {
  let sum = 0;

  arr.forEach((element) => {
    if (Array.isArray(element)) {
      sum += arraySum(element);
    } else if (typeof element === 'number') {
      sum += element;
    }
  });

  return sum;
}

// Цікаві варіанти з Codewars
function arraySum_(arr) {
  return arr.reduce(
    (n, x) => n + (Array.isArray(x) ? arraySum(x) : isNaN(x) ? 0 : x),
    0
  );
}
// ================================================================================================
// ================================================================================================
//*-Task №706 Unique Sum (7kyu)
/*
Враховуючи список цілочисельних значень, ваше завдання — повернути суму цих значень; однак, якщо
одне й те саме ціле значення зустрічається у списку кілька разів, ви можете врахувати його у своїй
сумі лише один раз.

Наприклад:
[ 1, 2, 3] ==> 6
[ 1, 3, 8, 1, 8] ==> 12
[ -1, -1, 5, 2, -7] ==> -1
[] ==> null
*/

// Мій варіант
function uniqueSum(lst) {
  if (lst.length < 1) {
    return null;
  }
  let uniqueValues = new Set(lst);
  let sum = 0;
  for (let value of uniqueValues) {
    sum += value;
  }
  return sum;
}
// Цікаві варіанти з Codewars
function uniqueSum_(lst) {
  return [...new Set(lst)].reduce((a, b) => a + b, null);
}
// ================================================================================================
// ================================================================================================
//*-Task №707 Substring fun (7kyu)
/*
Виконайте функцію, яка приймає масив слів.

Ви повинні об'єднати n-ту літеру з кожного слова, щоб створити нове слово, яке має бути повернуто
як рядок, де n – це позиція слова у списку.

Наприклад:
["yoda", "best", "has"]  -->  "yes"
  ^        ^        ^
  n=0     n=1     n=2

Примітка: Тестові випадки містять лише коректні вхідні дані, тобто масив рядків або порожній масив;
і кожне слово матиме достатню кількість літер.
*/

// Мій варіант
function nthChar(words) {
  let word = '';
  for (let i = 0; i < words.length; i++) {
    word += words[i][i];
  }
  return word;
}
// Цікаві варіанти з Codewars
const nthChar_ = (words) => words.map((word, index) => word[index]).join('');
//
const nthChar__ = (words) => words.reduce((a, b, index) => a + b[index], '');
// ================================================================================================
// ================================================================================================
//*-Task №708 Sum a list but ignore any duplicates (7kyu)
/*
Будь ласка, напишіть функцію, яка підсумовує список, але ігнорує будь-які дубліковані елементи у списку.

Наприклад, для списку [3, 4, 3, 6] функція повинна повертати 10,
а для списку [1, 10, 3, 10, 10] функція повинна повертати 4.
*/

// Мій варіант
function sumNoDuplicates(numList) {
  const counts = {};

  // Рахуємо кількість кожного елемента
  for (const num of numList) {
    counts[num] = (counts[num] || 0) + 1;
  }

  // Підсумовуємо лише ті, які трапляються лише один раз
  return numList
    .filter((num) => counts[num] === 1)
    .reduce((sum, num) => sum + num, 0);
}

// Цікаві варіанти з Codewars
function sumNoDuplicates__(numList) {
  return numList.reduce(
    (a, b) => (numList.indexOf(b) === numList.lastIndexOf(b) ? a + b : a),
    0
  );
}
// ================================================================================================
// ================================================================================================
//*-Task №709 Return a string's even characters. (7kyu)
/*
Напишіть функцію, яка повертає послідовність (індекс починається з 1) усіх парних символів з рядка.
Якщо рядок коротший за два символи або довший за 100 символів,
функція повинна повернути "недійсний рядок".

Наприклад:
"abcdefghijklm" --> ["b", "d", "f", "h", "j", "l"]
"a"             --> "invalid string"
*/

// Мій варіант
function evenChars(string) {
  if (string.length < 2 || string.length > 100) {
    return 'invalid string';
  }
  const result = string
    .split('')
    .slice(1)
    .filter((e, i, a) => {
      if (i % 2 === 0) {
        return e;
      }
    });
  return result;
}
// Цікаві варіанти з Codewars
function evenChars_(string) {
  return string.length < 2 || string.length > 100
    ? 'invalid string'
    : [...string].filter((_, i) => i % 2);
}
// ================================================================================================
// ================================================================================================
//*-залишилось 1671шт
// console.time('timer_1');
// console.timeEnd('timer_1');
