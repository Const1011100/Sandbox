//*-Task №701 (7kyu)
/*
У вашому класі ви розпочали уроки арифметичної прогресії. Оскільки ви також програміст,
ви вирішили написати функцію, яка повертатиме перші n елементів послідовності із заданою
спільною різницею d та першим елементом a. Зверніть увагу, що різниця може дорівнювати нулю!

Результатом має бути рядок чисел, розділених комою та пробілом.

Приклад
# first element: 1, difference: 2, how many: 5
arithmetic_sequence_elements(1, 2, 5) == "1, 3, 5, 7, 9"
*/

// Мій варіант
function arithmeticSequenceElements(a, d, n) {
  let result = [];
  for (let i = 0; i < n; i++) {
    result.push(a + i * d);
  }
  return result.join(', ');
}
// Цікаві варіанти з Codewars
function arithmeticSequenceElements_(a, r, n) {
  var ret = [a];
  while (--n) ret.push((a += r));
  return ret.join(', ');
}
// ================================================================================================
// ================================================================================================
//*-Task №702 Basic Sequence Practice (7kyu)
/*
Послідовність або ряд у математиці — це рядок об'єктів, таких як числа, які відповідають певному
шаблону. Окремі елементи послідовності називаються членами.
Простий приклад — 3, 6, 9, 12, 15, 18, 21, ..., де шаблон такий: «додати 3 до попереднього члена».

У цьому ката ми будемо використовувати складнішу послідовність: 0, 1, 3, 6, 10, 15, 21, 28, ...
Ця послідовність генерується за шаблоном: «n-й член — це сума чисел від 0 до n включно».
[ 0,  1,    3,      6,   ...]
  0  0+1  0+1+2  0+1+2+3

Ваше завдання
Виконайте функцію, яка приймає ціле число n та повертає масив довжини abs(n) + 1 з арифметичного ряду,
описаного вище. Коли n < 0, поверніть послідовність з від'ємними членами.

Приклади
 5  -->  [0,  1,  3,  6,  10,  15]
-5  -->  [0, -1, -3, -6, -10, -15]
 7  -->  [0,  1,  3,  6,  10,  15,  21,  28]
*/

// Мій варіант
function sumOfN(n) {
  const result = [];
  if (n < 0) {
    for (let i = -1; i >= n - 1; i--) {
      const triangularNumber = ((i * (i + 1)) / 2) * -1;
      result.push(triangularNumber);
    }
  }
  for (let i = 0; i <= n; i++) {
    const triangularNumber = (i * (i + 1)) / 2; // формула Трикутного числа
    result.push(triangularNumber);
  }
  return result;
}
// Цікаві варіанти з Codewars
function sumOfN_(n) {
  var array = [];
  array[0] = 0;
  for (var i = 1; i < Math.abs(n) + 1; i++) {
    if (n > 0) array[i] = array[i - 1] + i;
    else array[i] = array[i - 1] - i;
  }
  return array;
}
//
function sumOfN__(n) {
  for (var i = 0, list = []; i <= Math.abs(n); i++) {
    list.push((list[i - 1] || 0) + i * (n < 0 ? -1 : 1));
  }

  return list;
}
// ================================================================================================
// ================================================================================================
//*-залишилось 1678шт
// console.time('timer_1');
// console.timeEnd('timer_1');
