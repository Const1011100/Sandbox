//*-Task №361 Grasshopper - Terminal Game Turn Function (8kyu)
/*
Функція повороту термінальної гри
Ви створюєте текстову термінальну версію вашої улюбленої настільної гри. У настільній грі кожен хід
має шість кроків у такому порядку: кидати кубики, рухатися, битися, отримувати монети, купувати
більше здоров’я та друкувати статус.

Ви використовуєте бібліотеку (Game.Logic на C#), яка вже містить наведені нижче функції.
Створіть функцію з назвою doTurn, яка викликає функції в правильному порядку,
як описано в параграфі вище.
- combat
- buyHealth
- getCoins
- printStatus
- rollDice
- move
*/

// Мій варіант
function doTurn() {
    rollDice();
    move();
    combat();
    getCoins();
    buyHealth();
    printStatus();
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №362 Training JS #31: methods of arrayObject---isArray() indexOf() and toString() (8kyu)
/*
Завдання
Кодування у функції blackAndWhite. функція приймає 1 параметр arr (числовий масив).

Якщо arr не є масивом, функція має повернути:
"It's a fake array"

Якщо arr містить елементи 5 і 13, функція повинна повернути:
"It's a black array"

Якщо arr не містить ані 5, ані 13, функція має повернути:
"It's a white array"

Приклади
blackAndWhite(5,13) should return "It's a fake array"
blackAndWhite([5,13]) should return "It's a black array"
blackAndWhite([5,12]) should return "It's a white array" 
*/

// Мій варіант
function blackAndWhite(arr) {
    if (!Array.isArray(arr)) { return "It's a fake array" };
    if (!arr.includes(5) || !arr.includes(13)) {
        return "It's a white array";
    } else {
        return "It's a black array"
    }
}
// Цікаві варіанти з Codewars
const blackAndWhite_ = arr => `It's a ${!Array.isArray(arr) ? `fake` : arr.includes(5) && arr.includes(13) ? `black` : `white`} array`;
//
function blackAndWhite__(arr) {
    if (!Array.isArray(arr)) return 'It\'s a fake array'
    if (arr.indexOf(5) != -1 && arr.indexOf(13) != -1) return 'It\'s a black array'
    return 'It\'s a white array'
}
// ================================================================================================
// ================================================================================================
//*-Task №363 Improving Math.round(x) (8kyu)
/*
Завдання
Ваше завдання полягає в тому, щоб створити метод Math.roundTo(number, precision), який округлює дане
число до десяткових знаків з точністю.

Вам можуть бути корисні такі математичні методи:

Math.round(x) (звичайно)
Math.pow(x,y) (повертає x у степені y - наприклад, Math.pow(3,4) == 81)
*/

// Мій варіант (помог GPT)
Math.roundTo = function (number, precision) {
    var factor = Math.pow(10, precision);
    return Math.round(number * factor) / factor;
};

// Цікаві варіанти з Codewars
Math.roundTo_ = (number, precision) => Number(number.toFixed(precision));
// ================================================================================================
// ================================================================================================
//*-Task №364 Max Headroom and JavaScript style (8kyu)
/*
Чи не повинні дві функції getMax1 і getMax2 бути еквівалентними і повертати однакове значення?
Чи можете ви помітити проблему та вирішити її? Чи можете ви дізнатися щось про стиль JavaScript у цій ката?
*/

// Мій варіант
function getMax1() {
    var max =
    {
        name: 'Max Headroom'
    }
    return max;
}

function getMax2() {
    var max =
    {
        name: 'Max Headroom'
    }
    return max;
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №365 !a == a ?! (8kyu)
/*
Ваше завдання пройти лише такі тести:
a == false
!a == false
a == !a
*/

// Мій варіант
const a = '0';

// Цікаві варіанти з Codewars
const a_ = [];
// ================================================================================================
// ================================================================================================
//*-Task №366 Arguments to Binary addition (8kyu)
/*
Даний масив додає всі елементи числа та повертає двійковий еквівалент цієї суми;
щоб зробити код куленепробивним, будь-що, крім числа, має бути додано як 0, оскільки його неможливо додати.

Якщо ваша мова може обробляти двійкові файли з плаваючою точкою, припустимо, що масив не міститиме
числа з плаваючою точкою або подвійні значення.

arr2bin([1,2]) == '11'
arr2bin([1,2,'a']) == '11'
arr2bin([]) == '0'

NaN is a number too in javascript for decimal, binary and n-ary base
*/

// Мій варіант
function arr2bin(arr) {
    const numbers = [];
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] !== null && typeof arr[i] === 'number') {
            numbers.push(arr[i])
        } else {
            numbers.push(0);
        };
    }
    if (numbers.length < 1) { return '0' };
    const number = numbers.reduce((accum, num) => accum += num);
    return number.toString(2);
}

// Цікаві варіанти з Codewars
function arr2bin_(arr) {
    return arr.reduce((x, y) => x + (typeof y == "number" ? y : 0), 0).toString(2);
}
// ;
// ================================================================================================
// ================================================================================================
//*-Task №367 Invalid Login - Bug Fixing #11 (8kyu)
/*
Недійсний логін - виправлення помилки №11
О ні! Тіммі змінив підрозділи... але тепер він у сфері безпеки. Тіммі, будучи найкращим програмістом,
пропустив поганий код. Ви повинні допомогти Тіммі та відфільтрувати будь-який введений код!

Завдання
Ваше завдання просте: знайдіть у рядку пароля будь-який введений код (впроваджений код – це будь-яка річ,
яка буде використана для використання недоліків у поточному коді, отже, в основному все, що містить || або //),
якщо ви знайдете будь-який, ви повинні повернути " Неправильне ім'я користувача або пароль!"
тому що ніхто не любить, щоб хтось намагався його обдурити!

Попередньо завантажено
Вам буде надано попередньо завантажений клас під назвою Database із методом входу, який приймає два параметри:
ім’я користувача та пароль. Це загальна функція входу, яка перевірить базу даних для користувача,
вона поверне або «Успішно ввійшов!» якщо він пройшов перевірку або "Неправильне ім'я користувача чи пароль!"
якщо пароль неправильний або ім'я користувача не існує.

var database = new Database();
database.login('Timmy', 'password');
*/

// Мій варіант
function validate(username, password) {
    if (password.indexOf('||') > -1 || password.indexOf('//') > -1) return 'Wrong username or password!';
    return new Database().login(username, password);
}

// Цікаві варіанти з Codewars


// ================================================================================================
// ================================================================================================
//*-Task №368 noobCode 02: TRICKY QUESTIONS ( primitives and operator precedence) (8kyu)
/*
1 < 2 < 3 === true правильно? але могла
3 < 2 < 1 === true теж?
Ось ваша головоломка: напишіть функцію largerThanLessThan, яка приймає три аргументи, a, b і c, і
повертає логічне значення (істина або хибність), так що:

greaterThanLessThan(1, 2 3) === true
            та
greaterThanLessThan(3, 2 1) === true
        але також
graterThanLessThan(-3, -2, -1) == false

з більшою кількістю прикладів очікуваної поведінки в тестових випадках.

Підказки
Аргументи не обов’язково повинні бути в строгому порядку зростання або спадання, як показано в прикладах тестів.
Перегляньте включені тестові випадки - не всі аргументи повертатимуть істину! Вам вирішувати, які з них підходять, а які ні.

Це завдання НАБАГАТО легше, ніж може здатися на перший погляд.
Не зосереджуйтеся надто на побудові функцій - просто зверніть увагу на пріоритет.
Удачі!
*/

// Мій варіант
function greaterThanLessThan(a, b, c) {
    return a < b < c;
}

// Цікаві варіанти з Codewars


// ================================================================================================
// ================================================================================================
//*-Task №369 Circular Objects #1 - Running around in circles (8kyu)
/*
Завдання
Визначте круговий об’єкт circular таким чином, щоб наступне було вірним:
circular.value === "Hello World"
circular === circular.self
circular.self === circular.self.self

і так далі...

ПРИМІТКА. Наведений вище код є псевдокодом. Якби ви фактично перевірили свій циклічний об’єкт таким чином за допомогою
операторів рівності чи ідентифікації, це не спрацювало б, оскільки літерали об’єктів не мають внутрішнього значення.

Цікаві статті
На жаль, у цій ката будь-яка стаття, яку я вам рекомендую, негайно видасть рішення, тому я вирішив не рекомендувати
жодної статті в цій ката серії. Прошу вибачення за можливі незручності.
*/

// Мій варіант
const circular = {
    value: "Hello World",
};

circular.self = circular;

// Цікаві варіанти з Codewars
class Circular_ {
    constructor() {
        this.value = "Hello World";
        this.self = this;
    }
}

const circular_ = new Circular_();

// ================================================================================================
// ================================================================================================
//*-Task №370 Be Concise II - I Need Squares (8kyu)
/*
Be Concise II - Мені потрібні квадрати
Вам надається програма squaresOnly, яка приймає масив натуральних чисел до 100 включно (включно з 0)
довжиною >= 1, масив, і повертає новий масив, що містить лише квадратні числа, які з’явилися у вхідному масиві.

Рефакторинг рішення, щоб використовувати якомога менше символів. Максимальна кількість символів – 127.
Ось кілька порад:

У Javascript є багато зручних вбудованих методів Array, про які ви, можливо, ніколи не чули навіть
після завершення базового курсу Javascript (наприклад, тих, які надає Codecademy) - ну, принаймні я не
чув про них донедавна. Ви також можете дослідити будь-які нові вбудовані методи, запропоновані ES6,
найновішою специфікацією Javascript на момент написання.
Вам не здається, що параметр масиву трохи багатослівний? ;)
Удачі! :D
*/

// Мій варіант
const squaresOnly = a => a.filter(n => Number.isInteger(Math.sqrt(n)));


// Цікаві варіанти з Codewars
function squaresOnly_(a) {
    return a.filter(x => x ** 0.5 % 1 == 0);
}
// ================================================================================================
// ================================================================================================
//*-Task №371 Aspect Ratio Cropping - Part 1 (8kyu)
/*
Співвідношення сторін зображення описує пропорційне співвідношення між його шириною та висотою.
Більшість відео в Інтернеті використовують співвідношення сторін 16:9, що означає, що на кожен
піксель Y припадає приблизно 1,77 пікселя X (де 1,77 ~= 16/9).
Наприклад, відео 1080p із співвідношенням сторін 16:9 матиме роздільну здатність X 1920,
однак відео 1080p із співвідношенням сторін 4:3 матиме роздільну здатність X 1440.

Напишіть функцію, яка приймає довільну роздільну здатність X і Y і перетворює їх на роздільну здатність
із співвідношенням сторін 16:9, яка підтримує однакову висоту. Округліть свої відповіді до найближчого цілого числа.

Приклад
Зображення 374 × 280 пікселів із співвідношенням сторін 4:3.
Зображення 500 × 280 пікселів із співвідношенням сторін 16:9.
*/

// Мій варіант
function aspectRatio(x, y) {
    const newX = Math.ceil((16 / 9) * y);
    return [newX, y];
}

// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №372 Blood-Alcohol Content (8kyu)
/*
Боб надто багато п’є, і через це у нього часто виникають проблеми. Він випиває так багато,
що своїм алкогольним диханням розбив алкотестер місцевих правоохоронців! Боб почувається просто
приголомшливо, тож він хоче компенсувати це, створивши функцію, яка розраховуватиме для них рівень
алкоголю в його крові. На жаль, Боб став занадто п’яним, щоб займатися програмуванням сьогодні,
тому йому потрібна ваша допомога!

Йому вдалося дослідити формулу вмісту алкоголю в крові, перш ніж сильно напитися, яку він описує нижче.
Формула калькулятора BAC:
BAC% = (A × 5,14 / W × r) - 0,015 × H

A: Загальна кількість спожитого алкоголю, в унціях (унціях)
W: Вага тіла, у фунтах (lbs)
r: Коефіцієнт розподілу алкоголю, 0,73 для чоловіків і 0,66 для жінок
H: Після випивки минув час, години

Спожитий алкоголь буде передано як об’єкт напоїв із двома властивостями: унції (загальний об’єм спожитого напою в унціях)
і abv (% алкоголю за об’ємом напою як число з плаваючою комою, наприклад 0,05 для 5% пива або 0,4 для 40% віскі).
Для простоти Боб запевняє нас, що він п’є один і той же напій кожного разу, коли п’є.

Стать буде передано як рядок, «чоловічий» або «жіночий».
Вихідні дані мають бути повернуті як тип даних числа, більше або дорівнює 0, з 4 знаками після коми. Обробка помилок не потрібна.
Використовуючи ці параметри, створіть функцію, яка обчислюватиме BAC Боба та інших учасників.
*/

// Мій варіант
function bloodAlcoholContent(drinks, weight, sex, time) {
    const r = sex === 'male' ? 0.73 : 0.66
    const bac = (drinks.ounces * drinks.abv * 5.14 / weight * r ) - 0.015 * time;
    return Number(bac.toFixed(4));
}

// Цікаві варіанти з Codewars
function bloodAlcoholContent_(drinks, weight, sex, time) {
    return parseFloat(((drinks.ounces * drinks.abv * 5.14 / weight * (sex == 'male' ? 0.73 : 0.66)) - 0.015 * time).toFixed(4));
}
// ================================================================================================
// ================================================================================================
//*-Task №373 Configure package json for a node application (8kyu)
/*
Ваше завдання
Створіть конфігурацію package.json і призначте її константі конфігурації, щоб її можна було перевірити.
Щоб передати kata, вам потрібно лише те, що потрібно для справжнього файлу пакета.
*/

// Мій варіант
const configuration = {
    "name": "my-awesome-package",
    "version": "1.0.0",
    "description": "A simple description of my awesome package",
    "main": "index.js",
    "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
    },
    "author": "Const1011100",
    "license": "UNLICENSED"
};

// Цікаві варіанти з Codewars
const configuration_ = {
    "name": "your-pack-name",
    "version": "1.2.5"
};
// ================================================================================================
// ================================================================================================
//*-Task №374 Training JS #34: methods of Math---pow() sqrt() and cbrt() (8kyu)
/*
Завдання
Кодування у функції cutCube. функція приймає 2 параметри: обсяг і n. об'єм - це об'єм куба.
Якщо ми розріжемо куб на n блоків. визначте, будь ласка, чи є довжина куба цілим числом.
повернути true або false.
*/

// Мій варіант
function cutCube(volume, n) {
    function isPerfectCube(num) {
        let root = Math.cbrt(num);
        return Math.round(root) ** 3 === num;
    }

    if (!isPerfectCube(volume) || !isPerfectCube(n)) { return false };

    if (volume % n !== 0) { return false };

    let smallCubeVolume = volume / n;
    return isPerfectCube(smallCubeVolume);
}

// Цікаві варіанти з Codewars
function cutCube_(volume, n) {
    return !(Math.cbrt(n) % 1) && !(Math.cbrt(volume / n) % 1);
}
// ================================================================================================
// ================================================================================================
//*-Task №375 Never visit a...!? (8kyu)
/*
Відняти суму
Виконайте функцію, яка отримає вхідне число n таке, що n >= 10 і n < 10000, тоді:

Підсумуйте всі цифри числа n.
Відніміть суму від n, і це ваше нове n.
Якщо новий n є у списку нижче, поверніть відповідний плід, інакше поверніться до завдання 1.
*/

// Мій варіант
let fruits = {
    1: 'kiwi',
    2: 'pear',
    3: 'kiwi',
    4: 'banana',
    5: 'melon',
    6: 'banana',
    7: 'melon',
    8: 'pineapple',
    9: 'apple',
    10: 'pineapple',
    11: 'cucumber',
    12: 'pineapple',
    13: 'cucumber',
    14: 'orange',
    15: 'grape',
    16: 'orange',
    17: 'grape',
    18: 'apple',
    19: 'grape',
    20: 'cherry',
    21: 'pear',
    22: 'cherry',
    23: 'pear',
    24: 'kiwi',
    25: 'banana',
    26: 'kiwi',
    27: 'apple',
    28: 'melon',
    29: 'banana',
    30: 'melon',
    31: 'pineapple',
    32: 'melon',
    33: 'pineapple',
    34: 'cucumber',
    35: 'orange',
    36: 'apple',
    37: 'orange',
    38: 'grape',
    39: 'orange',
    40: 'grape',
    41: 'cherry',
    42: 'pear',
    43: 'cherry',
    44: 'pear',
    45: 'apple',
    46: 'pear',
    47: 'kiwi',
    48: 'banana',
    49: 'kiwi',
    50: 'banana',
    51: 'melon',
    52: 'pineapple',
    53: 'melon',
    54: 'apple',
    55: 'cucumber',
    56: 'pineapple',
    57: 'cucumber',
    58: 'orange',
    59: 'cucumber',
    60: 'orange',
    61: 'grape',
    62: 'cherry',
    63: 'apple',
    64: 'cherry',
    65: 'pear',
    66: 'cherry',
    67: 'pear',
    68: 'kiwi',
    69: 'pear',
    70: 'kiwi',
    71: 'banana',
    72: 'apple',
    73: 'banana',
    74: 'melon',
    75: 'pineapple',
    76: 'melon',
    77: 'pineapple',
    78: 'cucumber',
    79: 'pineapple',
    80: 'cucumber',
    81: 'apple',
    82: 'grape',
    83: 'orange',
    84: 'grape',
    85: 'cherry',
    86: 'grape',
    87: 'cherry',
    88: 'pear',
    89: 'cherry',
    90: 'apple',
    91: 'kiwi',
    92: 'banana',
    93: 'kiwi',
    94: 'banana',
    95: 'melon',
    96: 'banana',
    97: 'melon',
    98: 'pineapple',
    99: 'apple',
    100: 'pineapple'
};

const SubtractSum = n => {
    let number = n - String(n).split('').reduce((sum, item) => sum += +item, 0);
    if (number > 100) { return SubtractSum(number) };
    return fruits[number];
}

// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №376 Pole Vault Starting Marks (8kyu)
/*
Для стрибуна з жердиною дуже важливо починати підхід із найкращої стартової позначки.
Це залежить від багатьох факторів і потребує точного налаштування на практиці.
Але є вказівка, яка допоможе починаючому стрибуну почати приблизно з правильного місця для так
званого «трьохетапного підходу», заснованого на зрості тіла стрибуна.

Цю інструкцію мені навчили у футах і дюймах, але через міжнародний характер Codewars я створюю цю ката
для використання метричних одиниць.
Для початку вам надано наступні дві вказівки:
(1) Стрибун зростом 1,52 метри повинен стартувати з висоти 9,45 метрів на злітно-посадковій смузі.
(2) Стрибун з висотою 1,83 метра повинен стартувати на 10,67 метра на злітно-посадковій смузі.

Ви отримаєте зріст стрибуна в метрах (який завжди буде в діапазоні від мінімум 1,22 до максимум 2,13 метра).
Ваше завдання — повернути найкращу початкову позначку в метрах, округлену до двох знаків після коми.

Підказка: виходячи з двох наведених вище вказівок, ви захочете врахувати зміну стартової позначки за
зміну висоти тіла. Це передбачає лінійну залежність.
(Якщо вам це не зрозуміло, знайдіть в Інтернеті "лінійне рівняння".) Але також має місце постійне зміщення.
Якщо ви можете визначити швидкість зміни, описану вище, ви зможете визначити цей постійний зсув.
*/

// Мій варіант
function startingMark(bodyHeight) {
    const m = (10.67 - 9.45) / (1.83 - 1.52);
    return Math.round((10.67 + m * bodyHeight - m * 1.83) * 100) / 100;
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №377 Decibel Scale (8kyu)
/*
Наступна формула називається шкалою децибел:
(фото формули в задачі)

Шкала децибелів використовується для визначення гучності звуку, виміряної в дБ:

β — результат, який ми хочемо, визначений у дБ;
Ми множимо результат логарифмічної операції на 10, інакше це буде називатися «Шкала Бела»;
Ми надаємо I, інтенсивність звукової хвилі, для якої нам потрібно знайти гучність, яка, для цілей цієї Ката,
вимірюється у 2D просторі, а отже, у Ватах на квадратний метр;
Нарешті, ми ділимо інтенсивність на поріг людського слуху, який також вимірюється у Ватах на квадратний метр.
Це найм'якший звук, який може почути людське вухо;
Оскільки поріг людського слуху включає надзвичайно мале, довге число, нам потрібно використовувати
логарифмічну операцію, яка дасть нам результат у зручний спосіб.
Ваше завдання — просто обчислити гучність звукової хвилі, враховуючи її інтенсивність як параметр функції
dBScale/db_scale.

Результати тестів автоматично округляються до найближчого цілого числа.
*/

// Мій варіант
const dBScale = intensity => 10 * (12 + Math.log10(intensity));

// Цікаві варіанти з Codewars
const dBScale_ = (i) => 10 * Math.log10(i / Math.pow(10, -12));
// ================================================================================================
// ================================================================================================
//*-Task №378 How much water do I need? (8kyu)
/*
Моя пральна машина використовує воду кількість води для прання load (у JavaScript і Python) або
max_load (у Ruby) кількості одягу. Вам дається кількість одягу для прання.
Для кожного окремого предмета одягу понад завантаження пральна машина використовуватиме на 10% більше
води (множинне значення) для очищення.

Наприклад, якщо завантаження становить 10, необхідна кількість води – 5, а кількість одягу для прання – 14,
то вам потрібно 5 * 1,1 ^ (14 - 10) кількості води.

Напишіть функцію howMuchWater (JS)/how_much_water (Python і Ruby), щоб обчислити, скільки води потрібно,
якщо у вас є кількість одягу. Функція приймає 3 аргументи: - вода, навантаження (або max_load в Ruby) і одяг.

Моя пральна машина — це стара модель, яка витримує лише подвійну кількість завантаження (або max_load).
Якщо кількість одягу більш ніж у 2 рази перевищує стандартну кількість завантаження (max_load),
поверніть «Забагато одягу». Пральна машина також не може обробляти будь-яку кількість одягу,
менше завантаження (max_load). Якщо це так, поверніть «Недостатньо одягу».

Відповідь має бути округлена до найближчих 2 знаків після коми.
*/

// Мій варіант
function howMuchWater(water, load, clothes) {
    if (clothes < load) { return 'Not enough clothes' };
    if (clothes > 2 * load) { return 'Too much clothes' };
    let additionalClothes = clothes - load;
    let waterNeeded = water * Math.pow(1.1, additionalClothes);
    return Number(waterNeeded.toFixed(2));
}

// Цікаві варіанти з Codewars
const howMuchWater_ = (water, load, clothes) =>
    clothes < load ? `Not enough clothes` : clothes > 2 * load ? `Too much clothes` : Math.round(water * 1.1 ** (clothes - load) * 1e2) / 1e2;
// ================================================================================================
// ================================================================================================
//*-Task №379 Simple Change Machine (8kyu)
/*
Ваше завдання створити машину змін.
Автомат приймає окремі монети або купюри та повертає здачу монетами номіналом 20 і 10 пенсів.
Машина намагатиметься уникнути повернення точного введення, але в іншому випадку повертатиме якомога менше
монет. Наприклад, твір вартістю 50 пенсів має перетворитися на дві частини по 20 пенсів і одну
частину в 10 пенсів, але частина в 20 пенсів має перетворитися на дві частини по 10 пенсів.

Машина може обробляти виключно такі монети та банкноти: £5, £2, £1, 50p, 20p.
Будь-які монети та купюри, які не приймає машина, повертатимуться необробленими.
Наприклад, якщо ви помістите в автомат купюру номіналом 20 фунтів стерлінгів, вона буде повернута вам,
а не розбита на здачу. (Зауважте, що 1 фунт коштує 100 пенсів.)

Ця машина зміни запрограмована на прийом і розповсюдження рядків, а не чисел.
Вхідними даними буде рядок, що містить монету або купюру, що підлягають обробці,
і зміна має бути повернена як один рядок із назвами монет, розділених одинарними пробілами без ком.
Значення рядка мають бути в порядку спадання. Наприклад, введення "50p" має дати точний рядок "20p 20p 10p".
*/

// Мій варіант
function changeMe(moneyIn) {
    const data = {
        '£5': '20p '.repeat(25).trim(),
        '£2': '20p '.repeat(10).trim(),
        '£1': '20p '.repeat(5).trim(),
        '50p': '20p 20p 10p',
        '20p': '10p 10p',
    }
    if (!data.hasOwnProperty(moneyIn)) { return moneyIn };
    return data[moneyIn];
}

// Цікаві варіанти з Codewars
function changeMe_(moneyIn) {
    var accepted = ['£5', '£2', '£1', '50p', '20p'];
    var change = ["20p 20p 20p 20p 20p 20p 20p 20p 20p 20p " +
        "20p 20p 20p 20p 20p 20p 20p 20p 20p 20p " +
        "20p 20p 20p 20p 20p",
        "20p 20p 20p 20p 20p 20p 20p 20p 20p 20p",
        "20p 20p 20p 20p 20p", "20p 20p 10p", "10p 10p"]
    var moneyIndex = accepted.indexOf(moneyIn);
    if (moneyIndex == -1) return moneyIn;
    else return change[moneyIndex];
}
// ================================================================================================
// ================================================================================================
//*-Task №380 Total pressure calculation (8kyu)
/*
Дано молекулярну масу двох молекул M1 та M2, присутні їхні маси 𝑚1 та 𝑚2 в посудині обсягом V
при певній температурі T, знайти повний тиск Ptotal що здійснюється молекулами.
Формула для розрахунку тиску: (скрін в задачі)
*/

// Мій варіант
const solution = (molarMass1, molarMass2, givenMass1, givenMass2, volume, temp) => {
    return (givenMass1 / molarMass1 + givenMass2 / molarMass2) * 0.082 * (temp + 273.15) / volume;
}

// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №381 Collinearity (8kyu)
/*
Вам задано два вектори, починаючи з початку координат (x=0, y=0) з координатами (x1,y1) і (x2,y2).
Ваше завдання з'ясувати, чи колінеарні ці вектори.
Колінеарні вектори — це вектори, які лежать на одній прямій. Вони можуть бути спрямовані в одну або
протилежну сторону. Один вектор можна отримати з іншого, помноживши його на певне число.
За координатами вектори (x1, y1) і (x2, y2) є колінеарними, якщо (x1, y1) = (k*x2, k*y2) ,
де k — будь-яке число, що діє як коефіцієнт.
*/

// Мій варіант
function collinearity(x1, y1, x2, y2) {
    const collinearity = x1 * y2 - y1 * x2;
    return collinearity === 0;
}

// Цікаві варіанти з Codewars
function collinearity_(x1, y1, x2, y2) {
    return x1 * y2 === y1 * x2
}
// ================================================================================================
// ================================================================================================
//*-Task №382 Find the force of gravity between two objects (8kyu)
/*
Ваше завдання — знайти силу тяжіння між двома сферичними об’єктами (obj1, obj2).
введення

Дано два масиви:
arr_val (масив значень), складається з 3 елементів
1-й елемент: маса об’єкта 1
2-й елемент: маса obj 2
3-й елемент: відстань між їх центрами
arr_unit (одиничний масив), складається з 3 елементів
1-й елемент: одиниця маси об’єкта 1
2-й елемент: одиниця маси об’єкта 2
3-й елемент: одиниця відстані між їх центрами

одиницями маси є:
кілограм (кг)
грам (г)
міліграм (мг)
мікрограм (мкг)
фунт (lb)
одиницями відстані є:

метр (м)
сантиметр (см)
міліметр (мм)
мікрометр (мкм)
фути (фути)

Примітка
значення G = 6,67 × 10−11 Н⋅кг−2⋅м2
1 фут = 0,3048 м
1 фунт = 0,453592 кг
Повернене значення має бути Ньютон для сили (очевидно)
μ скопіюйте це звідси, щоб використати у своєму рішенні
*/

// Мій варіант
function solution_([m1, m2, d], [um1, um2, ud]) {
    const G = 6.67e-11;
    const conversion = {
        kg: 1, g: 1e-3, mg: 1e-6, μg: 1e-9, lb: .453592
        , m: 1, cm: 1e-2, mm: 1e-3, μm: 1e-6, ft: .3048
    };
    return G * m1 * conversion[um1] * m2 * conversion[um2] / (d * conversion[ud]) ** 2;
}

// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-залишилось 0шт
// console.time('timer_1');
// console.timeEnd('timer_1');