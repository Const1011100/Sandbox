//*-Task №141 Grasshopper - Basic Function Fixer (8kyu)
/*
Виправте функцію
Я створив цю функцію, щоб додати п’ять до будь-якого переданого числа та повернути нове значення.
Він не видає жодних помилок, але повертає неправильне число.
*/

// Мій варіант
const addFive = num => num + 5;

// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №142 Add Length (8kyu)
/*
Що, якщо нам потрібно додати довжину слів, розділених пробілом, у кінець того самого слова
та повернути це як масив?

"apple ban" --> ["apple 5", "ban 3"]
"you will win" -->["you 3", "will 4", "win 3"]
Ваше завдання — написати функцію, яка приймає рядок і повертає масив/список із довжиною кожного слова,
доданого до кожного елемента.

Примітка. Рядок матиме принаймні один елемент; слова завжди будуть розділені пробілом.
*/

// Мій варіант
const addLength = (str) => str.split(' ').map(word => `${word} ${word.length}`);

// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №143 Triple Trouble (8kyu)
/*
Потрійна біда
Створіть функцію, яка повертатиме рядок, який об’єднує всі літери трьох введених рядків у групи.
Взяти першу літеру всіх вхідних даних і згрупувати їх один біля одного. Зробіть це для кожної літери,
дивіться приклад нижче!

наприклад Вхід: "aa", "bb" , "cc" => Вихід: "abcabc"
Примітка. Можна очікувати, що всі вхідні дані будуть однакової довжини.
*/

// Мій варіант
function tripleTrouble(one, two, three) {
    let result = '';
    for(let i = 0; i < one.length; i++) {
        result += one[i] + two[i] + three[i];
    }
    return result;
}

// Цікаві варіанти з Codewars
function tripleTrouble_(one, two, three) {
    var result = "";
    for (let i = 0; i < one.length; i++) {
        result += one.charAt(i) + two.charAt(i) + three.charAt(i);
    }
    return result;
}
//
const tripleTrouble__ = (one, two, three) => one.split("").map((letter, index) => letter + two[index] + three[index]).join("");
//
function tripleTrouble___(one, two, three) {
    return one.replace(/./g, (v, i) => v + two[i] + three[i])
}
// ================================================================================================
// ================================================================================================
//*-Task №144 Bin to Decimal (8kyu)
/*
Виконайте функцію, яка перетворює двійкове число (у вигляді рядка) у десяткове число.
'10' -> 2
'1001001' -> 73
1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1
*/

// Мій варіант
const bin = '1001001';
function binToDec(bin) {
    let binaryCodeArray = [1];
    let binaryCodeElem = 1;
    let binToArray = bin.split('').reverse();
    let result = 0;
    for(let i = 1; i < bin.length; i++) {
        binaryCodeElem *=  2;
        binaryCodeArray.push(binaryCodeElem);
    }
    for(let i = 0; i < bin.length; i++) {
        if(binToArray[i] === '1') {
            result += binaryCodeArray[i];
        }
    }
    return result;
}

// Цікаві варіанти з Codewars\
function binToDec_(bin) {
    return parseInt(bin, 2);
}
/*
parseInt(string, radix) - це вбудований метод JS, який використовується для перетворення рядка в ціле число
у відповідності з вказанною системою обчислення (radix).
У контексті перетворення двійкових чисел, радікс зазвичай встановлюють 2.

string: Рядок, який потрібно перетворити в число.
radix: Опціональний параметр, вказує на основну систему обчислення. Це ціле число від 2 до 36.
Якщо він не вказаний, JS автоматично обере його в залежності від рядка.
*/
//
const binToDec__ = bin => [...bin].reduce((dec, bit) => dec << 1 | bit, 0);

// ================================================================================================
// ================================================================================================
//*-залишилось 238шт