//*-Task №401 Categorize New Member (7kyu)
/*
Крокетний клуб Western Suburbs має дві категорії членства: старше та відкрите.
Їм потрібна ваша допомога з аплікаційною формою, у якій потенційним членам буде вказано, до якої
категорії вони будуть призначені.

Щоб бути старшим, член повинен бути не менше 55 років і мати гандикап більше 7.
У цьому крокетному клубі гандикап коливається від -2 до +26; чим кращий гравець, тим нижчий гандикап.

Введення
Вхідні дані складатимуться зі списку пар. Кожна пара містить інформацію про одного потенційного члена.
Інформація складається з цілого числа для віку людини та цілого числа для вади людини.

Вихід
Вихідні дані складатимуться зі списку рядкових значень (у Haskell і C: Open або Senior),
які вказуватимуть, чи буде відповідний член поміщений у старшу чи відкриту категорію.

Приклад
input =  [[18, 20], [45, 2], [61, 12], [37, 6], [21, 21], [78, 9]]
output = ["Open", "Open", "Senior", "Open", "Open", "Senior"]
*/

// Мій варіант
function openOrSenior(data) {
    return data.map(elem => elem[0] >= 55 && elem[1] > 7 ? 'Senior' : 'Open');
}
// Цікаві варіанти з Codewars
function openOrSenior_(data) {
    return data.map(([age, handicap]) => (age > 54 && handicap > 7) ? 'Senior' : 'Open');
}
// ================================================================================================
// ================================================================================================
//*-Task №402 Find the next perfect square! (7kyu)
/*
Можливо, ви знаєте кілька досить великих ідеальних квадратів. Але як щодо НАСТУПНОГО?
Завершіть метод findNextSquare, який знаходить наступний інтегральний ідеальний квадрат після
переданого як параметра. Згадайте, що цілий повний квадрат — це таке ціле число n, що sqrt(n)
також є цілим числом.

Якщо аргумент сам по собі не є ідеальним квадратом, поверніть або -1, або порожнє значення,
наприклад None або null, залежно від вашої мови. Ви можете вважати, що аргумент невід’ємний.

Приклади: (Вхід --> Вихід)
121 --> 144
625 --> 676
114 --> -1 since 114 is not a perfect square
*/

// Мій варіант
function findNextSquare(sq) {
    const square = Math.sqrt(sq);
    return Number.isInteger(square) ? Math.pow(square + 1, 2) : -1;
}
// Цікаві варіанти з Codewars
function findNextSquare_(sq) {
    return Math.sqrt(sq) % 1 ? -1 : Math.pow(Math.sqrt(sq) + 1, 2);
}
// ================================================================================================
// ================================================================================================
//*-Task №403 Printer Errors (7kyu)
/*
На фабриці принтер друкує етикетки для коробок. Для одного виду коробок принтер повинен
використовувати кольори, які для простоти позначаються літерами від a до m.

Кольори, які використовує принтер, записуються в контрольний рядок. Наприклад, «хороший» рядок
керування буде aaabbbbhaijjjm, що означає, що принтер використав тричі колір a, чотири рази b,
один раз колір h і один раз колір a...

Іноді виникають проблеми: відсутність кольорів, технічна несправність і "поганий" контрольний рядок,
напр. aaaxbbbbyyhwawiwjjjwwm з літерами не від a до m.

Ви повинні написати функцію printer_error, яка, заданий рядок, повертатиме частоту помилок принтера
як рядок, що представляє раціональне число, чисельник якого – це кількість помилок, а знаменник – довжину
контрольного рядка. Не зводьте цей дріб до більш простого виразу.

Рядок має довжину, більшу або рівну одиниці, і містить лише літери з a до z.

Приклади:
s="aaabbbbhaijjjm"
printer_error(s) => "0/14"

s="aaaxbbbbyyhwawiwjjjwwm"
printer_error(s) => "8/22"
*/

// Мій варіант
function printerError(s) {
    let bad = s.match(/[n-z]/g);
    if (bad === null) { bad = 0 };
    return `${bad.length || 0}/${s.length}`;
}
// Цікаві варіанти з Codewars
function printerError_(s) {
    // your code
    var count = 0;
    for (var i = 0; i < s.length; i++) {
        if (s[i] > "m") {
            count++;
        }
    }
    return count + "/" + s.length;
}
//
const printerError__ = s => `${s.replace(/[a-m]/gi, "").length}/${s.length}`;
// ================================================================================================
// ================================================================================================
//*-Task №404 Regex validate PIN code (7kyu)
/*
Банкомати дозволяють використовувати 4- або 6-значні PIN-коди, а PIN-коди можуть містити лише 4 або 6 цифр.
Якщо функція передає дійсний рядок PIN-коду, повертає true, інакше повертає false.
Приклади (введення --> вихід)
"1234"   -->  true
"12345"  -->  false
"a234"   -->  false
*/

// Мій варіант
function validatePIN(pin) {
    return /^[0-9]*$/.test(pin) && (pin.length === 4 || pin.length === 6);
}
// Цікаві варіанти з Codewars
function validatePIN_(pin) {
    return /^(\d{4}|\d{6})$/.test(pin)
}
// ================================================================================================
// ================================================================================================
//*-Task №405 String ends with? (7kyu)
/*
Завершіть розв’язання так, щоб воно повертало true, якщо перший переданий аргумент (рядок)
закінчувався другим аргументом (також рядком).

Приклади:
solution('abc', 'bc') // returns true
solution('abc', 'd') // returns false
*/

// Мій варіант
function solution(str, ending) {
    return ending === '' ? true : ending === str.slice(-ending.length);
}
// Цікаві варіанти з Codewars
function solution_(str, ending) {
    return str.endsWith(ending);
}
// ================================================================================================
// ================================================================================================
//*-Task №406 Binary Addition (7kyu)
/*
Реалізуйте функцію, яка додає два числа та повертає їхню суму в двійковому вигляді.
Перетворення можна виконати до або після додавання.
Повернуте двійкове число має бути рядком.

Приклади: (Input1, Input2 --> Output (пояснення)))
1, 1 --> "10" (1 + 1 = 2 in decimal or 10 in binary)
5, 9 --> "1110" (5 + 9 = 14 in decimal or 1110 in binary)
*/

// Мій варіант
function addBinary(a, b) {
    return (a + b).toString(2);
}
// Цікаві варіанти з Codewars

// ================================================================================================
// ================================================================================================
//*-Task №407 Is this a triangle? (7kyu)
/*
Реалізуйте функцію, яка приймає 3 цілих значення a, b, c.
Функція має повертати true, якщо можна побудувати трикутник зі сторонами заданої довжини,
і false у будь-якому іншому випадку.
(У цьому випадку всі трикутники повинні мати поверхню більше 0, щоб бути прийнятими).

Приклади:
1,2,2 -> true
4,2,3 -> true
2,2,2 -> true
1,2,3 -> false
-5,1,3 -> false
0,2,3 -> false
1,2,9 -> false 
*/

// Мій варіант
function isTriangle(a, b, c) {
    return !(a + b <= c || a + c <= b || b + c <= a);
}
// Цікаві варіанти з Codewars
function isTriangle_(a, b, c) {
    return a + b > c && a + c > b && c + b > a;
}
//
var isTriangle__ = (a, b, c) => Math.max(a, b, c) < (a + b + c) / 2;
// ================================================================================================
// ================================================================================================
//*-залишилось 1949шт
// console.time('timer_1');
// console.timeEnd('timer_1');